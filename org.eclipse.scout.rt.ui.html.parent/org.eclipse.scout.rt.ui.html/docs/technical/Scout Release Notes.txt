Open source release notes: https://wiki.eclipse.org/Scout/NewAndNoteworthy/6.0

AWE 16.12.2014
org.eclipse.scout.rt.client.ui.desktop.AbstractDesktop
API isOutlineChanging hinzugef端gt

org.eclipse.scout.rt.client.ui.form.fields.AbstractFormField
API set/isStatusVisible hinzugef端gt

AWE 17.12.2014 [Bug 456408]
org.eclipse.scout.rt.client.ui.form.AbstractForm
API get/setBasicTitle entfernt
API get/setSubTitle hinzugef端gt
API PROP_SUB_TITLE hinzugef端gt
composeTitle entfernt (GUI-Logik)

AWE 05.01.2015 [Bug 456409]
org.eclipse.scout.rt.client.ui.desktop.outline.pages.IPage
API merged IPageWithTable and IPageWithNodes and moved duplicated methods to IPage
   IPage now has a T getTable() method, also changed abstract classes implementing
   these interfaces. IPage now expects a type parameter for the table.
API IPage:
  added T getTable();
  added boolean isDetailFormVisible();
  added void setDetailFormVisible(boolean visible);
  added ITreeNode getTreeNodeFor(ITableRow tableRow);
  added IPage getPageFor(ITableRow tableRow);
  added ITableRow getTableRowFor(ITreeNode treeNode);
  added List<ITableRow> getTableRowsFor(Collection<? extends ITreeNode> treeNodes);
API IPageWithNodes:
  replaced by getTable > ITable getInternalTable();
  moved to IPage > ITreeNode getTreeNodeFor(ITableRow tableRow);
  moved to IPage > ITableRow getTableRowFor(ITreeNode childPageNode);
API IPageWithTable:
  moved to IPage > T getTable();
  moved to IPage > ITreeNode getTreeNodeFor(ITableRow tableRow);
  moved to IPage > ITableRow getTableRowFor(ITreeNode childPageNode);
  moved to IPage > List<ITableRow> getTableRowsFor(Collection<? extends ITreeNode> childPageNodes);

Migration search/replace:
  Alle "IPage " suchen und ersetzen mit "IPage<?> "
  Alle "List<IPage>" suchen und ersetzen mit "List<IPage<?>>"

AWE 07.01.2015
org.eclipse.scout.rt.shared.ui.UiLayer
API removed values JSP, JSF, RAP, SWING
    added value HTML

org.eclipse.scout.rt.shared.ui.UserAgentUtility
API removed static boolean isRapUi(), static boolean isSwingUi()

CGU 07.01.2015
Improved page detail form handling:
The detail form is now created and started when the page gets activated and closed when the page gets disposed, similar to the search form.
API added getConfiguredDetailForm, execInitDetailForm, createDetailForm, startDetailForm

Migration:
Remove the detail form handling code from execPageActivated / execPageDeactivated / execPageDisposed
and use either getConfiguredDetailForm / execInitDetailForm or createDetailForm.

CGU 07.01.2015
Improved page search form disposal:
Search form is now closed when the page gets disposed.

Migration:
none

CGU 07.01.2015
Simplified form tool buttons:
Refactored api to be consistent with detail and search form handling of a page.
Removed code not necessary for html ui.

Migration:
Remove the form handling code from execStartForm and use either getConfiguredForm / execInitForm or createForm.

CGU 07.01.2015
API Added IForm#start()
Mainly useful for forms with just one handler. (detail forms, tool forms etc.). Maybe implemented by the concrete form.
The default implementation at AbstractForm uses getHandler() to start the form.

AWE 08.01.2015
org.eclipse.scout.rt.client.ui.basic.table.ITable
API added / implemented in AbstractTable
  List<ITableControl> getTableControls();
  <T extends ITableControl> T getTableControl(Class<T> controlClass);
  boolean isTableStatusVisible();
  void setTableStatusVisible(boolean visible);
  String getMenuBarPosition();
  void setMenuBarPosition(String position);

 ITableUIFacade
 API added:
  void fireTableReloadFromUI();
  void fireSortColumnRemovedFromUI(IColumn<?> column);

CGU 13.01.2015
The search table control now gets selected if the search is required.

Migration:
If you had a SearchFormToolButton, remove the code in Desktop#execPageSearchFormChanged.

CGU 13.01.2015
Added getConfiguredTableStatusVisible on IPageWithTable:
It is now possible to configure whether the table status should be visible for a table page.
Until now table status was set visible by the OutlineTableForm.

CGU 13.01.2015
Added default detail form on outline:
It is now possible to configure a default detail form for outlines. The default detail form gets shown when no page is selected.
API added getConfiguredDefaultDetailForm, execInitDefaultDetailForm, createDefaultDetailForm, startDefaultDetailForm

CGU 13.01.2015
Added ISearchOutline:
The intention of the search outline is to provide a search over several table pages.
The AbstractSearchOutline provides a frame, the search itself has to be implemented by the project.
In order to use it add the SearchOutline to the desktop using getConfiguredOutlines (don't create an outlineViewButton).


NBU 02.02.2015
InternalTableRow / AbstractTable: checked state of a row is moved to the table. The TYPE_ROWS_UPDATED is no longer used to notifiy
about rows checked. Instead there is a event TYPE_ROWS_CHECKED which is fired when rows are checked or unchecked. Also there is a
new Method on the model which is executed when rows are checked-> execRowsChecked. This method is also available in extensions.
 A row should be set to checked from the model even if the row is disabled. For this, the method setRowsChecked
is extended with a new param to identify if only enabled row should be checked or not. The ui should only check enabled rows, so the ui-facade
calls the method with true.
AbstractTreeNode / AbstractTree / AbstractTreeBox: checked state of a row is moved to the tree. The TYPE_NODE_UPDATED is no longer used to notifiy
about node checked. Instead there is a event TYPE_NODES_CHECKED which is fired when nodes are checked or unchecked. Also there is a
new Method on the model which is executed when nodes are checked-> execNodessChecked. This method is also available in extensions.
Also the implementation to check child nodes of a tree when a parent is checked is moved from the AbstractTreeBox to the tree. But the configuration
can be done on the AbstractTreeBox. A node should be set to checked from the model even if the node is disabled. For this, the method setNodesChecked
is extended with a new param to identify if only enabled nodes should be checked or not. The ui should only check enabled nodes, so the ui-facade
calls the method with true.

NBU 27.02.2015
Renamed constant PROP_KEYSTROKE to PROP_KEY_STROKE and changed the value of it to keyStroke for consitancy reasons.

BSH 02.03.2015
Moved MultiClientSessionCookieStore to org.eclipse.scout.rt.servicetunnel and renamed it to MultiSessionCookieStore.
It can now be used in client and server environments. Migration: Rename any class reference (API remains unchanged).
To make the service tunnel work with multiple sessions over HTTP, the MultiSessionCookieStore has to be installed.
This is _not_ done automatically, because the cookie manager is global for the entire JVM. Overriding this global
variable may break things in a JEE environment with multiple applications or a pre-installed custom cookie manager.
There are two options to install Scout's MultiSessionCookieStore:
1. Set the default cookie manager programmatically somewhere in your code. This is the way provided by the JVM,
   see http://docs.oracle.com/javase/tutorial/networking/cookies/cookiemanager.html for details.
2. Use Scout's auto-install mechanism by setting the property "org.eclipse.scout.rt.servicetunnel.multiSessionCookieStoreEnabled"
   in your config.ini to "true". This is the recommended way.

