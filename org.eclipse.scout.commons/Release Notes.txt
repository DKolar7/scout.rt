16.08.2010 abr
merged org.eclipse.scout.nls classes into org.eclipse.scout.commons bundle
moved public static methods from org.eclipse.scout.nls.NlsPlugin to org.eclipse.scout.nls.sdk.operations.AbstractCreateNlsProjectOperation
REMOVE dependencies on org.eclipse.scout.nls from MANIFEST.MF, feature.xml and product files
RENAME import org.eclipse.scout.nls. TO import org.eclipse.scout.commons.nls.

08.09.20101 imo
Since slf4j and logback is highly fragmented without any benefit, merged all slf4j and logback to one plugin "ch.qos.logback.all" at
https://svn.bsiag.com/tools/internal/logback.bsi/trunk/ch.qos.logback.all

Migration is optional
1. In the *.product files remove the following plugins
ch.qos.logback.core
ch.qos.logback.slf4j
org.slf4j.api
org.slf4j.ext
org.slf4j.jcl
org.slf4j.jul
org.slf4j.log4j
2. Add only the plugin
ch.qos.logback.all
3. In the project-specific fragment containing the logback.xml change the bundle-host in the MANIFEST.mf to "ch.qos.logback.all"

03.11.2010 abr
Modified MatrixUtility.sort: use NLSLocale instead of the formatting locale (i.e. Locale.getDefault()) for sorting arrays if
the sort method without a Locale is used: org.eclipse.scout.commons.MatrixUtility.sort(Object[][], int...)
Migration: none. If really the formatting Locale is required switch to MatrixUtility.sort(Locale.getDefault(), ...)

16.11.2010 imo
Since slf4j and logback is sometimes hiding log entries and due to the fact that scout must not support these out of the box,
reverted basic log handling to only supporting java and eclipse log out of the box.
Scout therefore supports classic eclipse log (using IStatus) and java log (using java.util.logging.Logger).
Details can be found in javadoc of org.eclipse.scout.commons.logger.ScoutLogManager

Migration: It is recommended NOT to use slf4j and logback with eclipse scout projects, it is too complex.
Remove all "ch.qos.logback*" "org.slf4j*" and log4j plugins from your product configurations and dependencies.
Remove the project-specific logback fragments from the project.
When using special logging filters, rollover logs etc. configure this in the standard java logger.properties in the project.
Details can be found in the google: "java util logger config"
*** Settings in config.ini for using classic eclipse log, this is normally used only in client appliactions on swt:
eclipse.consoleLog=true
org.eclipse.scout.log=eclipse
org.eclipse.scout.log.level=WARNING

*** Settings in config.ini for using java standard log, this is the recommended usage:
eclipse.consoleLog=false
org.eclipse.scout.log=java

05.01.2011 imo
Eliminated javax.mail and javax.jms plugins due to severe issues in sun's handling of javamail and mailcap configuration.
jax-ws interferes with javamail in a global static way which is dependent on which classloader initiates the factory.
The result is a lucky guess which class loader context loads the mailcap resources.
Migration:
* the endorsed jars are at O:\Scout SDK\Releases\Head\jre-lib-endorsed
* when using JRE 1.5: copy  javax.mail.jre15_1.4.1.jar and javax.jms_1.1.0.jar to the jre\lib\endorsed folder of the JRE.
* when using JRE 1.6: copy javax.mail.jre16_1.4.3.jar and javax.jms_1.1.0.jar to the jre\lib\endorsed folder of the JRE.
* restart eclipse, check installed jre's eventually press the button "Restore Defaults"
* remove the plugins from the IDE, the trunk IDE is automatically updated
* remove all import dependencies to javax.jms, javax.mail, javax.activation and com.sun
* remove all references to javax.mail, javax.activation, javax.jms and com.sun in *.product, *.xml and MANIFEST.MF files
* for every project using javax.* open project properties:
Build Path
 Libraries
  JRE System Library
   Access Rule
    Button "Edit..."
     Button "Add"
      add a new entry with "Accessible" javax/**

27.04.2011 dwi
Problem:
There was a need to
 - set dynamically a global log level
 - record log messages
 - add custom log implementations
Solution:
- The log level can be set dynamically using IScoutLogManager#setGlobalLogLevel(Integer globalLogLevel)
- log messages can be recorded by using IScoutLogManager#startRecording() and IScoutLogManager#stopRecording()
- other logging implementations can be installed by creating a fragment to the host Plug-In 'org.eclipse.scout.commons' with the class 'org.eclipse.scout.commons.logger.CustomLogManager' placed in it.
Migration: None

24.05.2011 hmu
Ticket: 102'394
Bugzilla – Bug 346619
Bugzilla – Bug 346190
Problem: Sending of MimeMessages with LotusNotes failed
Solution:
- MailUtility.createMimeMessageFromWordArchiveInternal changed
- MailUtility.writeHtmlBody added
- MailUtility.writePlainBody added
Migration: None

22.08.2011 dwi
BSI ticket #105'026, #104'976
Problem:
- Failed to display corrupt HTML pages (e.g. if missing closing quote in style definition)
- In HTML editor, no cleanup (auto-correction) should be applied to the given HTML. That is because if the user did some modifications in the HTML source and reloads the HTML in the editor anew, unwanted auto-corrections would be applied.
Solution:
- Accomplish consistency concerning HTML styling (cleanup) in between of Swing and SWT in regard of ScoutHtmlField and ScoutHmtEditor.
  In more detail, this entails the following:
  - Before passing the HTML to the respective widget (ScoutHtmlEditor, ScoutHtmlField), Abstract[Swing|Swt]Environment#styleHtmlText() is called to cleanup the given HTML.
  - In case of HTML editor mode, no modifications are applied to the given HTML in both, Swing and SWT, respectively.
  - However, in non-editor mode, some intelligence is applied to the HTML to ensure proper display of the HTML document.
    - In Swing, cleanup of HTML structure and CSS definitions is done. That is crucial as Swing HTML viewer has some problems with some CSS constructs.
    - In SWT, OS default browser is used. That is why cleanup of CSS is not necessary as done by browser itself.
      But, because the HTML is provided as file to the browser, proper encoding and charset must be set.
- Failsafe: if HTML text cannot be parsed for cleanup, the raw HTML text is used instead of an exception thrown.
- Consolidation of HTML cleanup functionality in HTMLUtility for plain and simple use that is applicable for both, SWT and Swing, respectively. That is why various methods in HtmlUtility are marked deprecated and will be removed in next Scout release.
Plug-Ins affected:
- org.eclipse.scout.commons (HTMLUtility
- org.eclipse.scout.rt.client (AbstractHtmlField)
- org.eclipse.scout.rt.ui.swing (AbstractSwingEnvironment, SwingScoutHtmlField, SwingScoutMailField)
- org.eclipse.scout.rt.ui.swing.bsi.fragment (SwingScoutHtmlEditor)
- org.eclipse.scout.rt.ui.swt (AbstractSwtEnvironment, SwtScoutHtmlField)
- org.eclipse.scout.rt.ui.swt.bsi.fragment (SwtScoutHtmlEditor)
Migration Swing: None
Migration SWT:
- In AbstractSwtEnvironment, the following methods are removed as not required anymore because logic is encapsulated in HTMLUtility.
  - AbstractSwtEnvironment#styleHtmlText(Control, String)
  - AbstractSwtEnvironment#createCSS(Control)
  - AbstractSwtEnvironment#createHtmlDocument(String, String)
Migration Swing / SWT (optional):
- In HTMLUtility, the following methods are marked deprecated. They will be removed in next Scout release.
  - HTMLUtility#parseDocument(String) to be replaced by HTMLUtility.toHtmlDocument(String)
  - HTMLUtility#formatDocument(String) to be replaced by HTMLUtility.toHtmlText(HTMLDocument)
  - HTMLUtility#cleanupDocument(HTMLDocument, String, int) to be replaced by HTMLUtility.cleanupHtml(String, boolean,boolean, DefaultFont)
  - HTMLUtility#wellformDocument(HTMLDocument, String, int) to be replaced by HTMLUtility.cleanupHtml(String, boolean,boolean, DefaultFont)

25.08.2011 dwi
BSI ticket #105'026
Problem:
Default font specific issues in HTML cleanup which is applied to the HTML text prior being provided to AbstractHtmlField:
 - Application specific default font settings should always be applied to body style definition if not specified yet
 - default font size unit on SWT should be pt instead of px
 - precedence of font-families should be supported in default font settings
Solution:
- Changed HTMLUtility#cleanupHtml(..) to ensure default font settings to be contained in CSS style definition
- changed default font size unit in AbstractSwtEnvironment#createDefaultFontSettings(Control) to pt
Plug-Ins changed:
- org.eclipse.scout.commons
- org.eclipse.scout.rt.ui.swt
- org.eclipse.scout.rt.ui.swing
Migration:
None

19.09.2011 dwi
BSI ticket #105'945
Problem:
Implementation of MailUtilty#createMimeMessageFromWordArchiveInternal(..) should behave the same as on Eclipse Scout Trunk (after 2011-Jun).
Solution:
In details, that means:
- ensure content-type and charset to be set when HTML body is applicable
Plug-Ins changed:
- org.eclipse.scout.commons [MailUtilty.class]
Migration:
None