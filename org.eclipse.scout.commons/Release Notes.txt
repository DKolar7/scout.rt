16.08.2010 abr
merged org.eclipse.scout.nls classes into org.eclipse.scout.commons bundle
moved public static methods from org.eclipse.scout.nls.NlsPlugin to org.eclipse.scout.nls.sdk.operations.AbstractCreateNlsProjectOperation
REMOVE dependencies on org.eclipse.scout.nls from MANIFEST.MF, feature.xml and product files
RENAME import org.eclipse.scout.nls. TO import org.eclipse.scout.commons.nls.

08.09.20101 imo
Since slf4j and logback is highly fragmented without any benefit, merged all slf4j and logback to one plugin "ch.qos.logback.all" at
https://svn.bsiag.com/tools/internal/logback.bsi/trunk/ch.qos.logback.all

Migration is optional
1. In the *.product files remove the following plugins
ch.qos.logback.core
ch.qos.logback.slf4j
org.slf4j.api
org.slf4j.ext
org.slf4j.jcl
org.slf4j.jul
org.slf4j.log4j
2. Add only the plugin
ch.qos.logback.all
3. In the project-specific fragment containing the logback.xml change the bundle-host in the MANIFEST.mf to "ch.qos.logback.all"

03.11.2010 abr
Modified MatrixUtility.sort: use NLSLocale instead of the formatting locale (i.e. Locale.getDefault()) for sorting arrays if
the sort method without a Locale is used: org.eclipse.scout.commons.MatrixUtility.sort(Object[][], int...)
Migration: none. If really the formatting Locale is required switch to MatrixUtility.sort(Locale.getDefault(), ...)

16.11.2010 imo
Since slf4j and logback is sometimes hiding log entries and due to the fact that scout must not support these out of the box,
reverted basic log handling to only supporting java and eclipse log out of the box.
Scout therefore supports classic eclipse log (using IStatus) and java log (using java.util.logging.Logger).
Details can be found in javadoc of org.eclipse.scout.commons.logger.ScoutLogManager

Migration: It is recommended NOT to use slf4j and logback with eclipse scout projects, it is too complex.
Remove all "ch.qos.logback*" "org.slf4j*" and log4j plugins from your product configurations and dependencies.
Remove the project-specific logback fragments from the project.
When using special logging filters, rollover logs etc. configure this in the standard java logger.properties in the project.
Details can be found in the google: "java util logger config"
*** Settings in config.ini for using classic eclipse log, this is normally used only in client appliactions on swt:
eclipse.consoleLog=true
org.eclipse.scout.log=eclipse
org.eclipse.scout.log.level=WARNING

*** Settings in config.ini for using java standard log, this is the recommended usage:
eclipse.consoleLog=false
org.eclipse.scout.log=java

05.01.2011 imo
Eliminated javax.mail and javax.jms plugins due to severe issues in sun's handling of javamail and mailcap configuration.
jax-ws interferes with javamail in a global static way which is dependent on which classloader initiates the factory.
The result is a lucky guess which class loader context loads the mailcap resources.
Migration:
* the endorsed jars are at O:\Scout SDK\Releases\Head\jre-lib-endorsed
* when using JRE 1.5: copy  javax.mail.jre15_1.4.1.jar and javax.jms_1.1.0.jar to the jre\lib\endorsed folder of the JRE.
* when using JRE 1.6: copy javax.mail.jre16_1.4.3.jar and javax.jms_1.1.0.jar to the jre\lib\endorsed folder of the JRE.
* restart eclipse, check installed jre's eventually press the button "Restore Defaults"
* remove the plugins from the IDE, the trunk IDE is automatically updated
* remove all import dependencies to javax.jms, javax.mail, javax.activation and com.sun
* remove all references to javax.mail, javax.activation, javax.jms and com.sun in *.product, *.xml and MANIFEST.MF files
* for every project using javax.* open project properties:
Build Path
 Libraries
  JRE System Library
   Access Rule
    Button "Edit..."
     Button "Add"
      add a new entry with "Accessible" javax/**

27.04.2011 dwi
Problem:
There was a need to
 - set dynamically a global log level
 - record log messages
 - add custom log implementations
Solution:
- The log level can be set dynamically using IScoutLogManager#setGlobalLogLevel(Integer globalLogLevel)
- log messages can be recorded by using IScoutLogManager#startRecording() and IScoutLogManager#stopRecording()
- other logging implementations can be installed by creating a fragment to the host Plug-In 'org.eclipse.scout.commons' with the class 'org.eclipse.scout.commons.logger.CustomLogManager' placed in it.
Migration: None

24.05.2011 hmu
Ticket: 102'394
Bugzilla – Bug 346619
Bugzilla – Bug 346190
Problem: Sending of MimeMessages with LotusNotes failed
Solution:
- MailUtility.createMimeMessageFromWordArchiveInternal changed
- MailUtility.writeHtmlBody added
- MailUtility.writePlainBody added
Migration: None

10.06.2011 imo
Internal BSI security audit
The legacy functionality of using &...& sql binds (instead of :abc or #abc#) can lead to sql injection if not used carefully.
Added warning whenever such code is used.
Support is eliminated in future release.
To disable warnings (not recommended) set the server-side config.ini property org.eclipse.scout.commons.sqlplainbind=true
To enable strict mode (recommended) set the server-side config.ini property org.eclipse.scout.commons.sqlplainbind=false
Strict mode throws an exception on usages of &..&
Migration:
Remove all occurrences and usages of &...& binds.
Use regex "&[\{\[]*[a-zA-Z]+[a-zA-Z0-9._\[\]\{\}]*&" to find occurrences.
When statement part composition is really needed, use string concatenation instead.
