14.09.2010 imo
Removed org.eclipse.scout.rt.shared.security.AllAccessPermission since it never worked and is not a valid jaas concept
Migration:
replace by java.security.AllPermission

21.12.2010 imo
Extracted DataModel with entities and attributes out of AbstractComposerField and moved to org.eclipse.scout.rt.shared.data.model
Migration: None, sometimes organize imports is necessary.
Legacy: There is legacy support with deprecated AbstractComposerAttribute and AbstractComposerEntity. Also inner attributes and entities of a composer field are still valid
and wrapped in a ComposerFieldDataModel.
Renaming:
AbstractComposerAttribute -> AbstractDataModelAttribute
AbstractComposerEntity -> AbstractDataModelEntity
ComposerAttributeInjector -> DataModelAttributeInjector
ComposerOp -> DataModelAttributeOp
ComposerConstants -> DataModelConstants
ComposerUtility -> DataModelUtility
IComposerAttribute -> IDataModelAttribute
IComposerOp -> IDataModelAttributeOp
IComposerEntity -> IDataModelEntity

10.02.2011 abr
Ticket 98'889
AbstractPropertyData.isValueSet() was not taken into account when importing a form data.

14.03.2011 dwi
org.eclipse.scout.rt.shared
- AbstractDataModelEntity
  Bug-Fix: Initialization of child entities
Migration: NONE

18.03.2011 imo
Migration of legacy: moving remaining legacy logic from client to server
Added TokenBasedSearchFilter, TokenBasedSearchFilterService to support token-based query building on logical level.
Added LegacySearchFilterService to support global client side legacy handling of search behaviour.
Migration: None

26.04.2011 imo
bugzilla 331535
bsi ticket 96886
bsi ticket 100749

Evaluated various solution variants:
1) service: not quite flexible since osgi services are either global or scoped on scout sessions. However, also gui composites are using ScoutTexts.get(...)
2) extension point: not valid. since this would merge texts of all scout apps in same workbench together
3) texts attached to client/server session: good starting point since swing/swt environment knows session.

3) is the solution.
The session-scoped nls texts (Texts.java) is set as ClientJob/ServerJob.setProperty() value on the Job and is then accessible via currentJob. ScoutTexts is delegating to this scope texts (default to ScoutTexts self)
ClientSession and ServerSession can override getNlsTexts() method to return their specific Texts.getInstance() object.
Swing is using the client session texts globally, swt / rwt is using the client session texts via Display.getData() accessor.

Migration: optionally add the following overrides to the client and server session of the application to support for
partially overriding existing scout texts

public class ClientSession
...
  @Override
  public DynamicNls getNlsTexts() {
    return Texts.getInstance();
  }


public class ServerSession
...
  @Override
  public DynamicNls getNlsTexts() {
    return Texts.getInstance();
  }

