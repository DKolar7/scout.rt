/*******************************************************************************
 * Copyright (c) 2010 BSI Business Systems Integration AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BSI Business Systems Integration AG - initial API and implementation
 ******************************************************************************/
package org.eclipse.scout.rt.shared.data.form;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * Type annotation on a form field used in scout sdk in order to generate the validation rule map on the
 * FormData.
 * <p>
 * Scout SDK writes the value of every annotated method into the static map "validationRules" of the corresponding
 * FormFielData.
 * <p>
 * Example for the form data field generated for a string field inside a form
 * 
 * <pre>
 * public class LastNameField extends AbstractStringField{
 *   ...
 * 
 *   protected boolean getConfiguredMandatory(){
 *     return true;
 *   }
 * 
 *   protected Integer getConfiguredMaxLength(){
 *     return 60;
 *   }
 * }
 * </pre>
 * 
 * <pre>
 * public class LastName extends AbstractValueFieldData&lt;String&gt;{
 *   ...
 *   public static final HashMap&lt;String,Object&gt; validationRules=new HashMap&lt;String,Object&gt;();
 *   static{
 *     validationRules.put("mandatory",true);
 *     validationRules.put("maxLength",60);
 *   }
 * }
 * </pre>
 * 
 * The two rule "put" lines were generated by the sdk due to the {@link ValidationRule} annotations on AbstractFormField
 * and AbstractStringField
 * <p>
 * The scout server (runtime) checks all inbound form datas and form fields according to their validationRules defined
 * in these shared classes (central input validation concept).
 * <p>
 * Custom validation can be added by subclassing ServiceTunnelServlet and implementing the filterInbound method.
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.METHOD})
public @interface ValidationRule {
  String value();

  /**
   * rules packaged with scout
   */
  String MANDATORY = "mandatory";
  String MIN_VALUE = "minValue";
  String MAX_VALUE = "maxValue";
  String MAX_LENGTH = "maxLength";
  String CODE_TYPE = "codeType";
  String LOOKUP_CALL = "lookupCall";
}
