Open source release notes: https://wiki.eclipse.org/Scout/NewAndNoteworthy/6.0

AWE 16.12.2014
org.eclipse.scout.rt.client.ui.desktop.AbstractDesktop
API isOutlineChanging hinzugef端gt

org.eclipse.scout.rt.client.ui.form.fields.AbstractFormField
API set/isStatusVisible hinzugef端gt

AWE 17.12.2014 [Bug 456408]
org.eclipse.scout.rt.client.ui.form.AbstractForm
API get/setBasicTitle entfernt
API get/setSubTitle hinzugef端gt
API PROP_SUB_TITLE hinzugef端gt
composeTitle entfernt (GUI-Logik)

AWE 05.01.2015 [Bug 456409]
org.eclipse.scout.rt.client.ui.desktop.outline.pages.IPage
API merged IPageWithTable and IPageWithNodes and moved duplicated methods to IPage
   IPage now has a T getTable() method, also changed abstract classes implementing
   these interfaces. IPage now expects a type parameter for the table.
API IPage:
  added T getTable();
  added boolean isDetailFormVisible();
  added void setDetailFormVisible(boolean visible);
  added ITreeNode getTreeNodeFor(ITableRow tableRow);
  added IPage getPageFor(ITableRow tableRow);
  added ITableRow getTableRowFor(ITreeNode treeNode);
  added List<ITableRow> getTableRowsFor(Collection<? extends ITreeNode> treeNodes);
API IPageWithNodes:
  replaced by getTable > ITable getInternalTable();
  moved to IPage > ITreeNode getTreeNodeFor(ITableRow tableRow);
  moved to IPage > ITableRow getTableRowFor(ITreeNode childPageNode);
API IPageWithTable:
  moved to IPage > T getTable();
  moved to IPage > ITreeNode getTreeNodeFor(ITableRow tableRow);
  moved to IPage > ITableRow getTableRowFor(ITreeNode childPageNode);
  moved to IPage > List<ITableRow> getTableRowsFor(Collection<? extends ITreeNode> childPageNodes);

Migration search/replace:
  Alle "IPage " suchen und ersetzen mit "IPage<?> "
  Alle "List<IPage>" suchen und ersetzen mit "List<IPage<?>>"

AWE 07.01.2015
org.eclipse.scout.rt.shared.ui.UiLayer
API removed values JSP, JSF, RAP, SWING
    added value HTML

org.eclipse.scout.rt.shared.ui.UserAgentUtility
API removed static boolean isRapUi(), static boolean isSwingUi()

CGU 07.01.2015
Improved page detail form handling:
The detail form is now created and started when the page gets activated and closed when the page gets disposed, similar to the search form.
API added getConfiguredDetailForm, execInitDetailForm, createDetailForm, startDetailForm

Migration:
Remove the detail form handling code from execPageActivated / execPageDeactivated / execPageDisposed
and use either getConfiguredDetailForm / execInitDetailForm or createDetailForm.

CGU 07.01.2015
Improved page search form disposal:
Search form is now closed when the page gets disposed.

Migration:
none

CGU 07.01.2015
Simplified form tool buttons:
Refactored api to be consistent with detail and search form handling of a page.
Removed code not necessary for html ui.

Migration:
Remove the form handling code from execStartForm and use either getConfiguredForm / execInitForm or createForm.

CGU 07.01.2015
API Added IForm#start()
Mainly useful for forms with just one handler. (detail forms, tool forms etc.). Maybe implemented by the concrete form.
The default implementation at AbstractForm uses getHandler() to start the form.

AWE 08.01.2015
org.eclipse.scout.rt.client.ui.basic.table.ITable
API added / implemented in AbstractTable
  List<ITableControl> getTableControls();
  <T extends ITableControl> T getTableControl(Class<T> controlClass);
  boolean isTableStatusVisible();
  void setTableStatusVisible(boolean visible);
  String getMenuBarPosition();
  void setMenuBarPosition(String position);

 ITableUIFacade
 API added:
  void fireTableReloadFromUI();
  void fireSortColumnRemovedFromUI(IColumn<?> column);

CGU 13.01.2015
The search table control now gets selected if the search is required.

Migration:
If you had a SearchFormToolButton, remove the code in Desktop#execPageSearchFormChanged.

CGU 13.01.2015
Added getConfiguredTableStatusVisible on IPageWithTable:
It is now possible to configure whether the table status should be visible for a table page.
Until now table status was set visible by the OutlineTableForm.

CGU 13.01.2015
Added default detail form on outline:
It is now possible to configure a default detail form for outlines. The default detail form gets shown when no page is selected.
API added getConfiguredDefaultDetailForm, execInitDefaultDetailForm, createDefaultDetailForm, startDefaultDetailForm

CGU 13.01.2015
Added ISearchOutline:
The intention of the search outline is to provide a search over several table pages.
The AbstractSearchOutline provides a frame, the search itself has to be implemented by the project.
In order to use it add the SearchOutline to the desktop using getConfiguredOutlines (don't create an outlineViewButton).


NBU 02.02.2015
InternalTableRow / AbstractTable: checked state of a row is moved to the table. The TYPE_ROWS_UPDATED is no longer used to notifiy
about rows checked. Instead there is a event TYPE_ROWS_CHECKED which is fired when rows are checked or unchecked. Also there is a
new Method on the model which is executed when rows are checked-> execRowsChecked. This method is also available in extensions.
 A row should be set to checked from the model even if the row is disabled. For this, the method setRowsChecked
is extended with a new param to identify if only enabled row should be checked or not. The ui should only check enabled rows, so the ui-facade
calls the method with true.
AbstractTreeNode / AbstractTree / AbstractTreeBox: checked state of a row is moved to the tree. The TYPE_NODE_UPDATED is no longer used to notifiy
about node checked. Instead there is a event TYPE_NODES_CHECKED which is fired when nodes are checked or unchecked. Also there is a
new Method on the model which is executed when nodes are checked-> execNodessChecked. This method is also available in extensions.
Also the implementation to check child nodes of a tree when a parent is checked is moved from the AbstractTreeBox to the tree. But the configuration
can be done on the AbstractTreeBox. A node should be set to checked from the model even if the node is disabled. For this, the method setNodesChecked
is extended with a new param to identify if only enabled nodes should be checked or not. The ui should only check enabled nodes, so the ui-facade
calls the method with true.

NBU 27.02.2015
Renamed constant PROP_KEYSTROKE to PROP_KEY_STROKE and changed the value of it to keyStroke for consitancy reasons.

BSH 02.03.2015
Moved MultiClientSessionCookieStore to org.eclipse.scout.rt.servicetunnel and renamed it to MultiSessionCookieStore.
It can now be used in client and server environments. Migration: Rename any class reference (API remains unchanged).
To make the service tunnel work with multiple sessions over HTTP, the MultiSessionCookieStore has to be installed.
This is _not_ done automatically, because the cookie manager is global for the entire JVM. Overriding this global
variable may break things in a JEE environment with multiple applications or a pre-installed custom cookie manager.
There are two options to install Scout's MultiSessionCookieStore:
1. Set the default cookie manager programmatically somewhere in your code. This is the way provided by the JVM,
   see http://docs.oracle.com/javase/tutorial/networking/cookies/cookiemanager.html for details.
2. Use Scout's auto-install mechanism by setting the property "org.eclipse.scout.rt.servicetunnel.multiSessionCookieStoreEnabled"
   in your config.properties to "true". This is the recommended way.

NBU 05.03.2015
AbstractDesktop: getConfiguredAutoTabKeyStrokesEnabled: In the HtmlUI it should be possible to change view Tabs with modifier+number.
The number should be generated by the ui. 9 is reservated to jump to the last tab, 0 to jump to the first tab. If this property is set to false
there is no Keystroke for tab change on the ui.
getConfiguredAutoTabKeyStrokeModifier:if the property above is set to true the modifier specified by this property is used in combination with a number
to change to the specific tab.

BSH 11.03.2015
AbstractSplitBox now returns "IFormField.FULL_SIZE" in getConfiguredGridW() by default. Reason: The split box widget does not really have a
representation of its own, but is more like a container for other fields. It can never have label, mandatory indicator etc. Its layout
should behave like a group box or a tab box, therefore the default gridW value was adjusted accordingly. Migration: Usually none. If
a gridW value of 1 is desired explicitly, the value must be set manually, e.g. by overriding getConfiguredGridW().

BSH 11.03.2015
A new widget was introduced: WizardProgressField. It is normally visualized as a list of steps with some indication which step is
the current step etc. Is will eventually replace the old "HTML status" field on the default wizard container form.

NBU 19.3.2015
Key Stroke fixes -> consistent naming KeyStroke in camelcase.
Menus should not be treated in delegate of a new KeyStroke. They have all keyStroke abilities from the superclass AbstractAction.
Removed ContributedKeyStroke Method from all FormField classes because this are only the menues which are added on the field.-> use getMenus() instead.

CGU 31.03.2015
Added bean field and bean column.
See AbstractBeanField, AbstractBeanColumn for details

CGU 01.04.2015
Menus of a page are now added to the detail form.
This was necessary because the outline tree does not show any menus anymore.
See also method AbstractPageWithNodes#enhanceDetailFormWithPageMenus.

CGU 02.4.2015
Added cssClass property to formField, column and cell for custom css styling. See also interface IStyleable.

CGU 10.4.2015
Refactored execHyperlinkAction
- Removed parameter url and local and renamed path to ref.
- Renamed to execAppLinkAction
With the new html ui real hyperlinks are handled by the browser. Other
links (formerly local links) are now called app links. The new method
execAppLinkAction is only called for app links, hence the parameters url
and local are not necessary anymore.

AWE 14.04.2015
Renamed package package org.eclipse.scout.rt.client.ui.form.fields.colorpicker to *.colorfield.

CGU 14.04.2015
Refactored editable behaviour of cells.
- Table.isCellEditable only returns cell.editable and does not consider table or row enabled and visible states
  Conforms to the behaviour of the other cell properties (text, cssStyle, etc).
- execIsEditable has been removed
  Use cell.setEditable (e.g. in execDecorateCell) if you want a cell to behave differently than the column.
- decorateCellInternal does not write properties to the cell anymore, this is now done initially or if the column property changes.
  Advantage: It's now possible to modify the cell properties outside of execDecorateCell. Furthermore, there is no need to execute this code so many times.
- Removed ICell.setEnabled
  Did not have any effect, use row.setEnabled instead. Or ICell.setEditable if you would like to control editability of a cell.

AWE 15.04.2015
AbstractContentAssistField and IProposalChooser implementations now have the ability to provide an inner class which extend AbstractTree
or AbstractTable to provide a custom implementation used in the proposal chooser.

AWE 16.04.2015
Renamed IDesktop#openUrlInBrowser to openUri, since passed String is not always an URL but sometimes an URI like tel:123 or mailto:foo@bar.com, etc.
Renamed IDesktop#openDownloadInBrowser to downloadResource, added overridden methods with BinaryResource parameter, so it's not required to create
  a IDownloadHandler instance to use the download methods.
Renamed IUrlTarget to ITargetWindows, UrlTarget to TargetWindow
Renamed DesktopEvent#TYPE_OPEN_URL_IN_BROWSER to TYPE_OPEN_URI
Renamed DesktopEvent#TYPE_OPEN_DOWNLOAD_IN_BROWSER to TYPE_DOWNLOAD_RESOURCE

ASA 21.04.2015 [bug 459893: replace ValidateOnAnyKey mechanism]
- removed:
    IBasicField.setValidateOnAnyKey(boolean)
    IBasicField.isValidateOnAnyKey()
    IBasicField.PROP_VALIDATE_ON_ANY_KEY
  use new updateDisplayTextOnModify-mechanism instead:
    IBasicField.setUpdateDisplayTextOnModify(boolean)}
    IBasicField.isUpdateDisplayTextOnModify(boolean)}
    AbstractBasicField.execChangedDisplayText()}
    IBasicField.PROP_UPDATE_DISPLAY_TEXT_ON_MODIFY
- IBasicFieldUIFacade renamed and changed method:
    from: boolean setTextFromUI(String newText, boolean whileTyping);
    to:   void setValueFromUI(String value);
- removed IColorFieldUiFacade

CGU 27.04.2015
Added default behaviour to AbstractForm#execCreateFormData
The method now creates a new instance of the form data based on the form data annotation.
Also added createFormData to the IForm interface.
Migration: If execCreateFormData was implemented and just used the default constructor of the corresponding form data class, the method may be removed.

BSH 27.04.2015
If all child nodes of a node in a tree are deleted, a TreeEvent with the new type ALL_CHILD_NODES_DELETED is
fired (instead of NODES_DELETED). This is useful for optimization.
Migration: If you previously added a listener for the type NODES_DELETED, you have to check if your implementation
needs to listen to the new ALL_CHILD_NODES_DELETED as well.

ASA 28.04.2015 [Bug 464770]
removed AbstractDoubleField and AbstractDoubleColumn
--> use AbstractBigDecimalField and AbstractBigDecimalColumn instead

BSH 28.04.2015
All owners of an IContextMenu now share a common interface: IContextMenuOwner.
This interface provides a method getMenuByClass(T), analogous to getFieldByClass(T), getColumnByClass(T) etc.
ITree and ITable provided a similar method getMenu(T). This method was deprecated in favor of getMenuByClass(T).
Usually, the migration is completed by simply renaming all calls to the old method. However, it should be noted
that the old behavior is not exactly reproduced in a special case: When more than one implementation of the given
class T was found, the old method just returned the first instance found. The new method throws an exception in
this case, because the order of the instances is not really defined. If you really want to find _any_ instance
of the given class, retrieve the list of all instances using getMenus() and apply the filtering by yourself.

ASA 29.04.2015 [bug 458535: NumberUtility.sum() is ambiguous]
removed methods:
- NumberUtility.avg(double...) --> no replacement
- NumberUtility.divide(double, double) --> no replacement
- NumberUtility.sum(double...) --> use sum(Number...)
- NumberUtility.sum(long...) --> use sum(Number...)

ASA 29.04.2015 [bug 465797]
removed:
TextTransferObject(String plainText, String htmlText)
TextTransferObject.getHtmlText()

deprecated:
HTMLUtility.DefaultFont
HTMLUtility.cleanupCss(...)
HTMLUtility.cleanupHtml(...)
HTMLUtility.cleanupHtml(...)
HTMLUtility.copyReferencedFilesToCache(...)
HTMLUtility.decodeText(...)
HTMLUtility.encodeText(...)
HTMLUtility.replaceContendIDs(...)
HTMLUtility.toHtmlText(...)
HTMLUtility.toPlainTextWithTable(...)

30.04.2015 [bug 465826]
ILabelField, IHtmlField and IStringField are now IHtmlCapable

AWE 01.05.2015
Removed get/setColor() from ICalenderItem, replaced with get/setCssClass().

AWE 02.06.2015
Moved get/setExternalKey() from ICalendarAppointment to base class ICalenderItem.
Removed decorateCell/-Internal method from AbstractCalendarItemProvider
Removed Cell instance from CalendarComponent

ASA 08.06.2015 [Ticket #158271]
- returned collection of ITableColumnFilterManager.getFilters() is now unmodifiable
- new method ITableColumnFilterManager.removeFilter(IColumn col)

JGU 08.06.2015
Deprecated getConfiguredAutoDisplayText in AbstractValueField.
The display text is always updated automatically.

AWE 10.06.2015
AbstractGroupBox setBorderVisible(false) does not change visibility of label anymore
Label of group-box must be made invisible by calling setLabelVisible(false)

BSH 10.06.2015
The model can define whether child pages of a page should be added immediately to the outline tree or lazily. If nodes are added lazily, a dummy "show all" node is shown instead.
Node pages never add child pages lazily. Table pages add child nodes lazily when they have more than a specific number of child pages (default 1).
The behavior may be controlled using:
- boolean getConfiguredLazyAddChildPagesToOutline() --> default false, for AbstractPageWithTable the default is true
- int getConfiguredLazyAddChildPagesToOutlineThreshold() --> setting for AbstractPageWithTable, after how many child pages the lazy setting should be active (default 1)

JGU 11.06.2015
getConfiguredTreat0AsNull in Smartfield has been deleted. (ses also Bugzill 469902)

SME 12.06.2015
MessageBox
- Removed title
    -> no replacement, title is not supported anymore with N release
- renamed intro text to header & info / actionText to body
- using method chaining to construct message box
    Example:
    - getHiddenText() -> hiddenText()
    - setHiddenText(hiddenText) -> hiddenText(hiddenText) and returning instance of IMessageBox
- Renamed startMessageBox to show
- Removed MessageBox(String title, String introText, String okButtonText)
    -> MessageBoxes.create().header(introText).yesButtonText(okButtonText)
- Removed MessageBox(String title, String introText, String actionText, String yesButtonText, String noButtonText, String cancelButtonText)
    -> MessageBoxes.create().header(introText).body(actionText).yesButtonText(yesButtonText).noButtonText(noButtonText).cancelButtonText(cancelButtonText);
- Removed MessageBox(String title, String introText, String actionText, String yesButtonText, String noButtonText, String cancelButtonText, String hiddenText, String iconId)
    -> MessageBoxes.create().header(introText).body(actionText).yesButtonText(yesButtonText).noButtonText(noButtonText).cancelButtonText(cancelButtonText).hiddenText(hiddenText).iconId(iconId);

In some cases of message boxes usage something like TEXTS.get("key", text) is used as argument.
To handle these, we first replace the inner , by another string, run the regex belows, and then restore the , again.
This is the simple way, otherwise a more complex regex would be required.
Use a pattern for temporary replacement that is not used anywhere else in the source code, e.g. 則則__則則.
Eclipse doesn't currently support replacement with lookahead expression, thus this will not work if executed with Eclipse search & replace.

Find:    (?<=MessageBox\.show(Ok|YesNo|YesNoCancel)Message\(([^\n]){0,200})TEXTS\.get\(("[\w]+"),([^\n,\)]+)\)
Replace: TEXTS.get(\1則則__則則\2)


If title was null, "" or TEXTS.get("ApplicationTitle") no special considerations are required.
Depending on how configured the Name of our application, you might used TEXTS.get("MyApplicationName") instead of TEXTS.get("ApplicationTitle).

Find:    MessageBox.show(Ok|YesNo|YesNoCancel)Message\((?:null|""|TEXTS.get\("ApplicationTitle"\)), ([^,\n]+?), ([^,\n]+?)\)(;|[ ]*==|[ ]*!=)
Replace: MessageBoxes.create\1().header(\2).body(\3).show()\4


If a real title is set, a manual check is required.
The old title might not be required anymore or the old title should be the new header
and existing header should be moved to new body (possible concat with old body).

Find:    MessageBox.show(Ok|YesNo|YesNoCancel)Message\(([^,\n]+?), ([^,\n]+?), ([^,\n]+?)\)(;|[ ]*==|[ ]*!=)
Replace: MessageBoxes.create\1().header(\3).body(\4).show()\5 /* XXX [messagebox] verify auto-migration, title: \2 */


Restore the temporary changed , by replacing 則則__則則 by , again.
After executing search & replace, take a look at the XXX [messagebox] tasks.

As a last step, header(null) or body(null) can be removed, because they have no effect.

Find:    MessageBoxes.create(.+)\(\)([^\n]*)?(\.header\(null\)|\.body\(null\))([^\n]*)?.show\(\)
Replace: MessageBoxes.create\1()\2\4.show()

