Open source release notes: https://wiki.eclipse.org/Scout/NewAndNoteworthy/6.0

AWE 16.12.2014
org.eclipse.scout.rt.client.ui.desktop.AbstractDesktop
API isOutlineChanging hinzugef端gt

org.eclipse.scout.rt.client.ui.form.fields.AbstractFormField
API set/isStatusVisible hinzugef端gt

AWE 17.12.2014 [Bug 456408]
org.eclipse.scout.rt.client.ui.form.AbstractForm
API get/setBasicTitle entfernt
API get/setSubTitle hinzugef端gt
API PROP_SUB_TITLE hinzugef端gt
composeTitle entfernt (GUI-Logik)

AWE 05.01.2015 [Bug 456409]
org.eclipse.scout.rt.client.ui.desktop.outline.pages.IPage
API merged IPageWithTable and IPageWithNodes and moved duplicated methods to IPage
   IPage now has a T getTable() method, also changed abstract classes implementing
   these interfaces. IPage now expects a type parameter for the table.
API IPage:
  added T getTable();
  added boolean isDetailFormVisible();
  added void setDetailFormVisible(boolean visible);
  added ITreeNode getTreeNodeFor(ITableRow tableRow);
  added IPage getPageFor(ITableRow tableRow);
  added ITableRow getTableRowFor(ITreeNode treeNode);
  added List<ITableRow> getTableRowsFor(Collection<? extends ITreeNode> treeNodes);
API IPageWithNodes:
  replaced by getTable > ITable getInternalTable();
  moved to IPage > ITreeNode getTreeNodeFor(ITableRow tableRow);
  moved to IPage > ITableRow getTableRowFor(ITreeNode childPageNode);
API IPageWithTable:
  moved to IPage > T getTable();
  moved to IPage > ITreeNode getTreeNodeFor(ITableRow tableRow);
  moved to IPage > ITableRow getTableRowFor(ITreeNode childPageNode);
  moved to IPage > List<ITableRow> getTableRowsFor(Collection<? extends ITreeNode> childPageNodes);

Migration search/replace:
  Alle "IPage " suchen und ersetzen mit "IPage<?> "
  Alle "List<IPage>" suchen und ersetzen mit "List<IPage<?>>"

AWE 07.01.2015
org.eclipse.scout.rt.shared.ui.UiLayer
API removed values JSP, JSF, RAP, SWING
    added value HTML

org.eclipse.scout.rt.shared.ui.UserAgentUtility
API removed static boolean isRapUi(), static boolean isSwingUi()

CGU 07.01.2015
Improved page detail form handling:
The detail form is now created and started when the page gets activated and closed when the page gets disposed, similar to the search form.
API added getConfiguredDetailForm, execInitDetailForm, createDetailForm, startDetailForm

Migration:
Remove the detail form handling code from execPageActivated / execPageDeactivated / execPageDisposed
and use either getConfiguredDetailForm / execInitDetailForm or createDetailForm.

CGU 07.01.2015
Improved page search form disposal:
Search form is now closed when the page gets disposed.

Migration:
none

CGU 07.01.2015
Simplified form tool buttons:
Refactored api to be consistent with detail and search form handling of a page.
Removed code not necessary for html ui.

Migration:
Remove the form handling code from execStartForm and use either getConfiguredForm / execInitForm or createForm.

CGU 07.01.2015
API Added IForm#start()
Mainly useful for forms with just one handler. (detail forms, tool forms etc.). Maybe implemented by the concrete form.
The default implementation at AbstractForm uses getHandler() to start the form.

AWE 08.01.2015
org.eclipse.scout.rt.client.ui.basic.table.ITable
API added / implemented in AbstractTable
  List<ITableControl> getTableControls();
  <T extends ITableControl> T getTableControl(Class<T> controlClass);
  boolean isTableStatusVisible();
  void setTableStatusVisible(boolean visible);
  String getMenuBarPosition();
  void setMenuBarPosition(String position);

 ITableUIFacade
 API added:
  void fireTableReloadFromUI();
  void fireSortColumnRemovedFromUI(IColumn<?> column);

CGU 13.01.2015
The search table control now gets selected if the search is required.

Migration:
If you had a SearchFormToolButton, remove the code in Desktop#execPageSearchFormChanged.

CGU 13.01.2015
Added getConfiguredTableStatusVisible on IPageWithTable:
It is now possible to configure whether the table status should be visible for a table page.
Until now table status was set visible by the OutlineTableForm.

CGU 13.01.2015
Added default detail form on outline:
It is now possible to configure a default detail form for outlines. The default detail form gets shown when no page is selected.
API added getConfiguredDefaultDetailForm, execInitDefaultDetailForm, createDefaultDetailForm, startDefaultDetailForm

CGU 13.01.2015
Added ISearchOutline:
The intention of the search outline is to provide a search over several table pages.
The AbstractSearchOutline provides a frame, the search itself has to be implemented by the project.
In order to use it add the SearchOutline to the desktop using getConfiguredOutlines (don't create an outlineViewButton).


NBU 02.02.2015
InternalTableRow / AbstractTable: checked state of a row is moved to the table. The TYPE_ROWS_UPDATED is no longer used to notifiy
about rows checked. Instead there is a event TYPE_ROWS_CHECKED which is fired when rows are checked or unchecked. Also there is a
new Method on the model which is executed when rows are checked-> execRowsChecked. This method is also available in extensions.
 A row should be set to checked from the model even if the row is disabled. For this, the method setRowsChecked
is extended with a new param to identify if only enabled row should be checked or not. The ui should only check enabled rows, so the ui-facade
calls the method with true.
AbstractTreeNode / AbstractTree / AbstractTreeBox: checked state of a row is moved to the tree. The TYPE_NODE_UPDATED is no longer used to notifiy
about node checked. Instead there is a event TYPE_NODES_CHECKED which is fired when nodes are checked or unchecked. Also there is a
new Method on the model which is executed when nodes are checked-> execNodessChecked. This method is also available in extensions.
Also the implementation to check child nodes of a tree when a parent is checked is moved from the AbstractTreeBox to the tree. But the configuration
can be done on the AbstractTreeBox. A node should be set to checked from the model even if the node is disabled. For this, the method setNodesChecked
is extended with a new param to identify if only enabled nodes should be checked or not. The ui should only check enabled nodes, so the ui-facade
calls the method with true.

NBU 27.02.2015
Renamed constant PROP_KEYSTROKE to PROP_KEY_STROKE and changed the value of it to keyStroke for consitancy reasons.

BSH 02.03.2015
Moved MultiClientSessionCookieStore to org.eclipse.scout.rt.servicetunnel and renamed it to MultiSessionCookieStore.
It can now be used in client and server environments. Migration: Rename any class reference (API remains unchanged).
To make the service tunnel work with multiple sessions over HTTP, the MultiSessionCookieStore has to be installed.
This is _not_ done automatically, because the cookie manager is global for the entire JVM. Overriding this global
variable may break things in a JEE environment with multiple applications or a pre-installed custom cookie manager.
There are two options to install Scout's MultiSessionCookieStore:
1. Set the default cookie manager programmatically somewhere in your code. This is the way provided by the JVM,
   see http://docs.oracle.com/javase/tutorial/networking/cookies/cookiemanager.html for details.
2. Use Scout's auto-install mechanism by setting the property "org.eclipse.scout.rt.servicetunnel.multiSessionCookieStoreEnabled"
   in your config.properties to "true". This is the recommended way.

NBU 05.03.2015
AbstractDesktop: getConfiguredAutoTabKeyStrokesEnabled: In the HtmlUI it should be possible to change view Tabs with modifier+number.
The number should be generated by the ui. 9 is reservated to jump to the last tab, 0 to jump to the first tab. If this property is set to false
there is no Keystroke for tab change on the ui.
getConfiguredAutoTabKeyStrokeModifier:if the property above is set to true the modifier specified by this property is used in combination with a number
to change to the specific tab.

BSH 11.03.2015
AbstractSplitBox now returns "IFormField.FULL_SIZE" in getConfiguredGridW() by default. Reason: The split box widget does not really have a
representation of its own, but is more like a container for other fields. It can never have label, mandatory indicator etc. Its layout
should behave like a group box or a tab box, therefore the default gridW value was adjusted accordingly. Migration: Usually none. If
a gridW value of 1 is desired explicitly, the value must be set manually, e.g. by overriding getConfiguredGridW().

BSH 11.03.2015
A new widget was introduced: WizardProgressField. It is normally visualized as a list of steps with some indication which step is
the current step etc. Is will eventually replace the old "HTML status" field on the default wizard container form.

NBU 19.3.2015
Key Stroke fixes -> consistent naming KeyStroke in camelcase.
Menus should not be treated in delegate of a new KeyStroke. They have all keyStroke abilities from the superclass AbstractAction.
Removed ContributedKeyStroke Method from all FormField classes because this are only the menues which are added on the field.-> use getMenus() instead.

CGU 31.03.2015
Added bean field and bean column.
See AbstractBeanField, AbstractBeanColumn for details

CGU 01.04.2015
Menus of a page are now added to the detail form.
This was necessary because the outline tree does not show any menus anymore.
See also method AbstractPageWithNodes#enhanceDetailFormWithPageMenus.

CGU 02.4.2015
Added cssClass property to formField, column and cell for custom css styling. See also interface IStyleable.

CGU 10.4.2015
Refactored execHyperlinkAction
- Removed parameter url and local and renamed path to ref.
- Renamed to execAppLinkAction
With the new html ui real hyperlinks are handled by the browser. Other
links (formerly local links) are now called app links. The new method
execAppLinkAction is only called for app links, hence the parameters url
and local are not necessary anymore.

AWE 14.04.2015
Renamed package package org.eclipse.scout.rt.client.ui.form.fields.colorpicker to *.colorfield.

CGU 14.04.2015
Refactored editable behaviour of cells.
- Table.isCellEditable only returns cell.editable and does not consider table or row enabled and visible states
  Conforms to the behaviour of the other cell properties (text, cssStyle, etc).
- execIsEditable has been removed
  Use cell.setEditable (e.g. in execDecorateCell) if you want a cell to behave differently than the column.
- decorateCellInternal does not write properties to the cell anymore, this is now done initially or if the column property changes.
  Advantage: It's now possible to modify the cell properties outside of execDecorateCell. Furthermore, there is no need to execute this code so many times.
- Removed ICell.setEnabled
  Did not have any effect, use row.setEnabled instead. Or ICell.setEditable if you would like to control editability of a cell.

AWE 15.04.2015
AbstractContentAssistField and IProposalChooser implementations now have the ability to provide an inner class which extend AbstractTree
or AbstractTable to provide a custom implementation used in the proposal chooser.

AWE 16.04.2015
Renamed IDesktop#openUrlInBrowser to openUri, since passed String is not always an URL but sometimes an URI like tel:123 or mailto:foo@bar.com, etc.
Renamed IDesktop#openDownloadInBrowser to downloadResource, added overridden methods with BinaryResource parameter, so it's not required to create
  a IDownloadHandler instance to use the download methods.
Renamed IUrlTarget to ITargetWindows, UrlTarget to TargetWindow
Renamed DesktopEvent#TYPE_OPEN_URL_IN_BROWSER to TYPE_OPEN_URI
Renamed DesktopEvent#TYPE_OPEN_DOWNLOAD_IN_BROWSER to TYPE_DOWNLOAD_RESOURCE

ASA 21.04.2015 [bug 459893: replace ValidateOnAnyKey mechanism]
- removed:
    IBasicField.setValidateOnAnyKey(boolean)
    IBasicField.isValidateOnAnyKey()
    IBasicField.PROP_VALIDATE_ON_ANY_KEY
  use new updateDisplayTextOnModify-mechanism instead:
    IBasicField.setUpdateDisplayTextOnModify(boolean)}
    IBasicField.isUpdateDisplayTextOnModify(boolean)}
    AbstractBasicField.execChangedDisplayText()}
    IBasicField.PROP_UPDATE_DISPLAY_TEXT_ON_MODIFY
- IBasicFieldUIFacade renamed and changed method:
    from: boolean setTextFromUI(String newText, boolean whileTyping);
    to:   void setValueFromUI(String value);
- removed IColorFieldUiFacade

CGU 27.04.2015
Added default behaviour to AbstractForm#execCreateFormData
The method now creates a new instance of the form data based on the form data annotation.
Also added createFormData to the IForm interface.
Migration: If execCreateFormData was implemented and just used the default constructor of the corresponding form data class, the method may be removed.

BSH 27.04.2015
If all child nodes of a node in a tree are deleted, a TreeEvent with the new type ALL_CHILD_NODES_DELETED is
fired (instead of NODES_DELETED). This is useful for optimization.
Migration: If you previously added a listener for the type NODES_DELETED, you have to check if your implementation
needs to listen to the new ALL_CHILD_NODES_DELETED as well.

ASA 28.04.2015 [Bug 464770]
removed AbstractDoubleField and AbstractDoubleColumn
--> use AbstractBigDecimalField and AbstractBigDecimalColumn instead

BSH 28.04.2015
All owners of an IContextMenu now share a common interface: IContextMenuOwner.
This interface provides a method getMenuByClass(T), analogous to getFieldByClass(T), getColumnByClass(T) etc.
ITree and ITable provided a similar method getMenu(T). This method was deprecated in favor of getMenuByClass(T).
Usually, the migration is completed by simply renaming all calls to the old method. However, it should be noted
that the old behavior is not exactly reproduced in a special case: When more than one implementation of the given
class T was found, the old method just returned the first instance found. The new method throws an exception in
this case, because the order of the instances is not really defined. If you really want to find _any_ instance
of the given class, retrieve the list of all instances using getMenus() and apply the filtering by yourself.

ASA 29.04.2015 [bug 458535: NumberUtility.sum() is ambiguous]
removed methods:
- NumberUtility.avg(double...) --> no replacement
- NumberUtility.divide(double, double) --> no replacement
- NumberUtility.sum(double...) --> use sum(Number...)
- NumberUtility.sum(long...) --> use sum(Number...)

ASA 29.04.2015 [bug 465797]
removed:
TextTransferObject(String plainText, String htmlText)
TextTransferObject.getHtmlText()

deprecated:
HTMLUtility.DefaultFont
HTMLUtility.cleanupCss(...)
HTMLUtility.cleanupHtml(...)
HTMLUtility.cleanupHtml(...)
HTMLUtility.copyReferencedFilesToCache(...)
HTMLUtility.decodeText(...)
HTMLUtility.encodeText(...)
HTMLUtility.replaceContendIDs(...)
HTMLUtility.toHtmlText(...)
HTMLUtility.toPlainTextWithTable(...)

30.04.2015 [bug 465826]
ILabelField, IHtmlField and IStringField are now IHtmlCapable

AWE 01.05.2015
Removed get/setColor() from ICalenderItem, replaced with get/setCssClass().

AWE 02.06.2015
Moved get/setExternalKey() from ICalendarAppointment to base class ICalenderItem.
Removed decorateCell/-Internal method from AbstractCalendarItemProvider
Removed Cell instance from CalendarComponent

ASA 08.06.2015 [Ticket #158271]
- returned collection of ITableColumnFilterManager.getFilters() is now unmodifiable
- new method ITableColumnFilterManager.removeFilter(IColumn col)

JGU 08.06.2015
Deprecated getConfiguredAutoDisplayText in AbstractValueField.
The display text is always updated automatically.

AWE 10.06.2015
AbstractGroupBox setBorderVisible(false) does not change visibility of label anymore
Label of group-box must be made invisible by calling setLabelVisible(false)

BSH 10.06.2015
The model can define whether child pages of a page should be added immediately to the outline tree or lazily. If nodes are added lazily, a dummy "show all" node is shown instead.
Node pages never add child pages lazily. Table pages add child nodes lazily when they have more than a specific number of child pages (default 1).
The behavior may be controlled using:
- boolean getConfiguredLazyAddChildPagesToOutline() --> default false, for AbstractPageWithTable the default is true
- int getConfiguredLazyAddChildPagesToOutlineThreshold() --> setting for AbstractPageWithTable, after how many child pages the lazy setting should be active (default 1)

JGU 11.06.2015
getConfiguredTreat0AsNull in Smartfield has been deleted. (ses also Bugzilla 469902)

SME 12.06.2015
MessageBox
- Removed title
    -> no replacement, title is not supported anymore with N release
- renamed intro text to header & info / actionText to body
- using method chaining to construct message box
    Example:
    - getHiddenText() -> getHiddenText()
    - setHiddenText(hiddenText) -> withHiddenText(hiddenText) and returning instance of IMessageBox
- Renamed startMessageBox to show
- Removed MessageBox(String title, String introText, String okButtonText)
    -> MessageBoxes.create().withHeader(introText).withYesButtonText(okButtonText)
- Removed MessageBox(String title, String introText, String actionText, String yesButtonText, String noButtonText, String cancelButtonText)
    -> MessageBoxes.create().withHeader(introText).withBody(actionText).withYesButtonText(yesButtonText).withNoButtonText(noButtonText).cancelButtonText(cancelButtonText);
- Removed MessageBox(String title, String introText, String actionText, String yesButtonText, String noButtonText, String cancelButtonText, String hiddenText, String iconId)
    -> MessageBoxes.create().withHeader(introText).withBody(actionText).withYesButtonText(yesButtonText).withNoButtonText(noButtonText).withCancelButtonText(cancelButtonText).withHiddenText(hiddenText).withIconId(iconId);
- Moved MessageBox.showDeleteConfirmationMessage methods to MessagesBoxes class
- If html needs to be displayed, use the new html(IHtmlContent) method. Header / body methods do not support html.

In some cases of message boxes usage something like TEXTS.get("key", text) is used as argument.
To handle these, we first replace the inner , by another string, run the regex belows, and then restore the , again.
This is the simple way, otherwise a more complex regex would be required.
Use a pattern for temporary replacement that is not used anywhere else in the source code, e.g. 則則__則則.
Eclipse doesn't currently support replacement with lookahead expression, thus this will not work if executed with Eclipse search & replace.

  Find:    (?<=MessageBox\.show(Ok|YesNo|YesNoCancel)Message\(([^\n]){0,200})TEXTS\.get\(("[\w]+"),([^\n,\)]+)\)
  Replace: TEXTS.get(\1則則__則則\2)

If title was null, "" or TEXTS.get("ApplicationTitle") no special considerations are required.
Depending on how configured the Name of our application, you might used TEXTS.get("MyApplicationName") instead of TEXTS.get("ApplicationTitle).

  Find:    MessageBox.show(Ok|YesNo|YesNoCancel)Message\((?:null|""|TEXTS.get\("ApplicationTitle"\)), ([^,\n]+?), ([^,\n]+?)\)(;|[ ]*==|[ ]*!=)
  Replace: MessageBoxes.create\1().withHeader(\2).withBody(\3).show()\4

If a real title is set, a manual check is required.
The old title might not be required anymore or the old title should be the new header
and existing header should be moved to new body (possible concat with old body).

  Find:    MessageBox.show(Ok|YesNo|YesNoCancel)Message\(([^,\n]+?), ([^,\n]+?), ([^,\n]+?)\)(;|[ ]*==|[ ]*!=)
  Replace: MessageBoxes.create\1().withHeader(\3).withBody(\4).show()\5 /* XXX [messagebox] verify auto-migration, title: \2 */

Restore the temporary changed , by replacing 則則__則則 by , again.
After executing search & replace, take a look at the XXX [messagebox] tasks.

As a last step, withHeader(null) or withBody(null) can be removed, because they have no effect.

  Find:    MessageBoxes.create(.+)\(\)([^\n]*)?(\.withHeader\(null\)|\.withBody\(null\))([^\n]*)?.show\(\)
  Replace: MessageBoxes.create\1()\2\4.show()

To handle calls to showDeleteConfirmationMessage, use the following replacement (no regex)

  Find:    MessageBox.showDeleteConfirmationMessage(
  Replace: MessageBoxes.showDeleteConfirmationMessage(

SME 16.06.2015
org.eclipse.scout.commons.dnd.TransferObject
removed isText(), isFileList(), isImage(), isLocalObject(): replacement: instanceof check for the appropriate subclasses of TransferObject
renamed FileListTransferObject to ResourceListTransferObject

BSH 16.06.2015
IBrowserField is no longer a value field. The RemoteFile value was changed to a property of type BinaryResource.
Migration:
- Instead of setValue()/getValue() use setBinaryResource()/getBinaryResource()
- Instead of execChangedValue() use a BrowserFieldListener
- If you relied on the browser field to be "save needed" when setting the value (RemoteFile), you have to call touch() manually,
  because the browser field will never report "save needed" by itself (because it has no value).

MOT 22.06.2015:
removed IStringField.isSelectAllOnFocus(), IStringField.setSelectAllOnFocus(boolean)
removed IStringColumn.isSelectAllOnEdit(), IStringColumn.setSelectAllOnEdit(boolean)

AWE 22.06.2015:
removed AbstractBrowserField#execAcceptLocationChange
removed AbstractBrowserField#execLocationChanged
removed AbstractBrowserField#doLocationChange
added AbstractBrowserField#execPostMessage as replacement
More infos: https://loop.bsi-software.com/groups/scout-html-ui/blog/2015/06/22/browserfield-mit-html-ui

MOT 23.06.2015:
removed IStringField.isSpellCheckAsYouTypeEnabled(), IStringField.setSpellCheckAsYouTypeEnabled(boolean)
added IStringField.setSpellCheckEnabled(boolean)
new ui delegates spell checker to browser, new property can be used to enable/disable spell checker for certain fields
(by default it is enabled for multi-line fields, see org.eclipse.scout.rt.client.ui.form.fields.stringfield.AbstractStringField.computeSpellCheckEnabled()).

BSH 23.06.2015:
getWizard[...]Button() methods in IWizardContainerForm no longer return IButton, but IWizardAction. This change allows returning
menus instead of buttons. IWizardAction serves as a common interface for IButton and IAction and provides some methods that
are commonly used for the wizard buttons (e.g. setVisible, setEnabled). Because IAction calls its label "text", those menus
have to override getLabel/setLabel and delegate the calls to the corresponding "text" methods. Alternatively, the class
AbstractWizardMenu may be used instead of AbstractMenu.
Migration:
- For own implementations of IWizardContainerForm, replace the return value IButton by IWizardAction.
- For code that previously used the setView(boolean, boolean, boolean) method on wizard buttons, a new setView(boolean, boolean)
  method was introduced on IButton and IAction (because it does not make sense to make a button "mandatory"). This can be
  migrated by just deleting the third argument.

OSC 24.06.2015:
IClientSession.stopSession() was renamed to stop() to match IServerSession.stop().
Migration: Rename stopSession() to stop().

MOT 25.06.2015/01.07.2015:
API changes AbstractHtmlField:
- For IHtmlField attachments RemoteFile has been replaced by BinaryResource, therefore method signatures of getAttachments() and setAttachments have changed.
--> Migration: Replace RemoteFile with BinaryResource.
- Attachments must be used within the IHtmlField's value as [...] src="binaryResource:test.png" [...] (instead of src="test.png").
--> Migration: Preprend binaryResource: where attachments are used.
- New feature: Icons can be used w/o adding them as attachment using [...] src="iconid:ApplicationLogo" [...].
--> No migration needed (new feature), but old attachments refering to icons could be replaced with this new feature.
API changes AbstractStringField:
- Method renaming: getConfiguredDecorationLink() -> getConfiguredHasAction()
- Method renaming: isDecorationLink() -> isHasAction()
- Method renaming: setDecorationLink(boolean) -> setHasAction(boolean)
--> Migration: Replace old method name with new name.
- Method renaming/signature change: execLinkAction(java.net.URL) -> execAction()
--> Migration: execAction() can access value using getValue(), it could create the old URL using org.eclipse.scout.commons.IOUtility.urlTextToUrl(getValue())
- New property for selection tracking, changeable with methods isSelectionTrackingEnabled() and setSelectionTrackingEnabled(boolean)
--> Selection tracking with getSelectionStart() and getSelectionEnd() is only possible when selection tracking is enabled.

AWE 02.07.2015
Removed IOutlineTableForm, IOutlineTreeForm and all sub-classes.
They're not supported by the new Html UI anymore.

MOT 08.07.2015:
Added:
- org.eclipse.scout.rt.client.ui.IDNDSupport.setDropMaximumSize(long)
- org.eclipse.scout.rt.client.ui.IDNDSupport.getDropMaximumSize()
- org.eclipse.scout.rt.client.ui.basic.filechooser.IFileChooser.setMaximumUploadSize(long)
- org.eclipse.scout.rt.client.ui.basic.filechooser.IFileChooser.getMaximumUploadSize()
- org.eclipse.scout.rt.client.ui.form.fields.filechooserfield.IFileChooserField.setMaximumUploadSize(long)
- org.eclipse.scout.rt.client.ui.form.fields.filechooserfield.IFileChooserField.getMaximumUploadSize()
Also added getConfigured...() methods were applicable for properties above. File upload size is always limited now (otherwise server might run out of memory if too large files are sent).
Default size is 50 MB, but every field might specify lower/higher sizes.

AWE 10.07.2015:
Removed methods UserAgentUtility#isRichClient() and #isWebClient()
Deleted CopyColumnsWidthsMenu, replaced with new button in OrganizeColumnsForm

CGU 13.07.2015:
Changed return value of IGroupBox.getConfiguredScrollable to TriState
Mainbox is now scrollable by default.
Migration:
- You can remove getConfiguredScrollable() from your mainboxes
- If you want another groupbox to be scrollable, you have to set the groupbox to scrollable while setting the mainbox to scrollable = false.

BSH 15.07.2015:
ITree.getConfiguredDefaultIconId() in addition to ITree.getConfiguredIconId
Difference:
DefaultIconId is used as default for all tree nodes that don't have an icon on their own.
IconId may be used in the same way as the title, e.g as outline icon.
Migration:
- If you want every tree node to have an icon, use defaultIconId. Otherwise no migration necessary.

MOT 16.07.2015:
- AbstractColumn.execPrepareEdit(ITableRow) must not return null anymore use Cell.setEditable(boolean) instead.

BSH 23.07.2015:
The UI facade of AbstractDateField was changed. To support offline, more responsive date/time validation
on the new Html UI, formatting and parsing has to be performed on the UI layer, not on the model layer
(otherwise, the UI would have to wait for the model on every key press). The date field UI facade was
changed in the following way:
Instead of sending a text to the model and validating/parsing it there, a already valid (from the parsing
perspective) date is sent to the model. The model may then still validate it (e.g. check ranges), but
the parsing is done entirely on the UI. As a consequence, not all date format patterns defined in
SimpleDateFormat are supported anymore, only the most commonly used. By default, the date field
uses locale-dependent patterns that are supported by the UI, see getDefaultDateFormatPatternByLocale()
and getDefaultTimeFormatPatternByLocale(). Both the date and the time part of a date field have
a separate pattern, because they are rendered in two separate fields on the UI.
Migration:
The method AbstractDateField.execParseValue() is no longer supported. It cannot be removed entirely,
because it is defined on AbstractValueField, but is marked as deprecated and final to make it clear
that it is never called. If any subclass had overridden this method, it should be deleted. The code
cannot be migrated, because it is now performed in the UI only.

JGU 03.08.2015
- changed ILookupRow to fluent API: use with... instead of set...

BSH 17.08.2015
Removed the members m_autoDate and m_autoTimeMillis from AbstractDateField. They were replaced by a single
property PROP_AUTO_DATE of type java.util.Date.
Migration:
- Replace getConfiguredAutoTimeMillis()/setAutoTimeMillis()/getAutoTimeMillis() by getConfiguredAutoDate()/
  setAutoDate()/getAutoDate(). If both a date and time part should be set, combine them in the same
  java.util.Date argument. The methods DateUtility.createDateTime() and DateUtility.convertDoubleTimeToDate()
  may be useful.

BSH 21.08.2015
Removed "populate status" and "selection status" methods from IPage and ITableField.
The only status is on the table itself and is called "table status".
IPage and ITableField have new convenience methods for getting/setting the table status (without requiring
null checks on getTable()).
Migration:
[IPage]
- Replace setPagePopulateStatus() by setTableStatus()
- Replace getPagePopulateStatus() by getTableStatus()
[ITableField]
- Properties PROP_TABLE_SELECTION_STATUS, PROP_TABLE_POPULATE_STATUS, PROP_TABLE_STATUS_VISIBLE no longer
  exist on ITableField. If you need to listen to them, change your listener target the the field's ITable.
- Method createDefaultTableStatus() was dropped without replacement. "Selection status" is not supported
  by Html UI at the moment (selection is visualized on the UI only, not in the model).
- get/setTableStatus() convenience methods with Strings were dropped without replacement. Use
  getTableStatus().get/setMessage() instead.
- get/setTableSelectionStatus() were dropped without replacement. "Selection status" is not supported
  by Html UI at the moment (selection is visualized on the UI only, not in the model).
- Change get/setTablePopulateStatus() to get/setTableStatus()
- updateTableStatus() was dropped without replacement. Simply set the table status with setTableStatus().
- getConfiguredTableStatusVisible() was dropped without replacement. Instead, the initial "table status
  visible" property should be set on the table. (In most cases, you can simply move the
  getConfiguredTableStatusVisible() method from the table field to the table.

CGU 16.09.2015
Replaced ITableColumnFilterManager by TableUserFilterManager
Reason for the rename is because more filter types were added.
There are currently 2 filter types: Column filter and text filter, there will be a chart filter in the future.
Additionally, the filtering now happens in the UI.
The ui sends the filtered rows to the ui server to update its table state so that getFilteredRows return the currently visible rows on the ui.
This rowsFiltered event leads to a creation of UserTableRowFilter which contains the filtered rows. This is the only active filter on a table.
The filters managed by TableUserFilterManager are actually only filter states and are not added to the table.

ASA 24.09.2015
Removed IToolButton from Form. Therefore IToolButtons can not be added anymore as an extension to Forms.
--> Instead IToolButton can be defined inside the MainBox of a Form. (IToolButton now is a IMenu and adding Menus to a GroupBoxes as
    extension is also supported.)

CGU 09.10.2015
Outline: Having a selected page is not mandatory anymore.
An outline overview or the default detail form will be displayed if no page is selected.
Therefore activating an outline does not automatically select the first page anymore.
If the previous behavior is still wanted, one can implemented IDesktop#execOutlineChanged and call activateFirstPage if active page is null
