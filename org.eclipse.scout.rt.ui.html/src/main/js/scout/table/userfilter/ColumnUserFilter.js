/*******************************************************************************
 * Copyright (c) 2014-2015 BSI Business Systems Integration AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BSI Business Systems Integration AG - initial API and implementation
 ******************************************************************************/
scout.ColumnUserFilter = function() {
  scout.ColumnUserFilter.parent.call(this);
  this.filterType = scout.ColumnUserFilter.Type;

  /**
   * array of (normalized) key, text composite
   */
  this.availableValues = [];

  /**
   * array of (normalized) keys
   */
  this.selectedValues = [];
};
scout.inherits(scout.ColumnUserFilter, scout.TableUserFilter);

scout.ColumnUserFilter.Type = 'column';

scout.ColumnUserFilter.prototype.axisGroup = function() {
  return scout.TableMatrix.NumberGroup.COUNT;
};

scout.ColumnUserFilter.prototype.calculate = function() {
  var containsSelectedValue, reorderAxis;

  this.matrix = new scout.TableMatrix(this.table, this.session);
  this.matrix.addData(this.column, scout.TableMatrix.NumberGroup.COUNT);
  this.xAxis = this.matrix.addAxis(this.column, this.axisGroup());
  var cube = this.matrix.calculate();

  this.selectedValues.forEach(function(selectedValue) {
    containsSelectedValue = false;
    if (this._useTextInsteadOfNormValue(selectedValue)) {
      // selected value was not normalized -> normalize
      selectedValue = this.xAxis.norm(selectedValue);
    }
    this.xAxis.some(function(key) {
      if (key === selectedValue) {
        containsSelectedValue = true;
        return true;
      }
    }, this);

    if (!containsSelectedValue) {
      this.xAxis.push(selectedValue);
      reorderAxis = true;
    }
  }, this);

  if (reorderAxis) {
    this.xAxis.reorder();
  }

  var text, displayKey, cubeValue;
  this.availableValues = [];
  this.xAxis.forEach(function(key) {
    displayKey = key;
    text = this.xAxis.format(key);
    if (this._useTextInsteadOfNormValue(key)) {
      displayKey = text;
    }
    cubeValue = cube.getValue([key]);
    this.availableValues.push({
      key: displayKey,
      text: text,
      count: cubeValue ? cubeValue[0] : 0
    });
  }, this);
};

/**
 * In case of text columns, the normalized key generated by the matrix is not deterministic,
 * it depends on the table data -> use the text. In the other cases it is possible to use the
 * normalized key which has the advantage that it is locale independent.
 */
scout.ColumnUserFilter.prototype._useTextInsteadOfNormValue = function(value) {
  return false;
};

/**
 * @override TableUserFilter.js
 */
scout.ColumnUserFilter.prototype.createAddFilterEventData = function() {
  var data = scout.ColumnUserFilter.parent.prototype.createAddFilterEventData.call(this);
  data.columnId = this.column.id;
  data.selectedValues = this.selectedValues;
  return data;
};

scout.ColumnUserFilter.prototype.createRemoveFilterEventData = function() {
  var data = scout.ColumnUserFilter.parent.prototype.createRemoveFilterEventData.call(this);
  data.columnId = this.column.id;
  return data;
};

scout.ColumnUserFilter.prototype.createLabel = function() {
  return this.column.text || '';
};

scout.ColumnUserFilter.prototype.createKey = function() {
  return this.column.id;
};

scout.ColumnUserFilter.prototype.accept = function(row) {
  if (!this.xAxis) {
    // Lazy calculation. It is not possible on init, because the table is not rendered yet.
    this.calculate();
  }
  var
    acceptByTable = true,
    acceptByFields = true,
    key = this.column.cellValueForGrouping(row),
    normKey = this.xAxis.norm(key);

  if (this._useTextInsteadOfNormValue(normKey)) {
    normKey = this.xAxis.format(normKey);
  }
  if (this.tableFilterActive()) {
    acceptByTable = this.selectedValues.indexOf(normKey) > -1;
  }
  if (this.fieldsFilterActive()) {
    acceptByFields = this.acceptByFields(key, normKey);
  }

  return acceptByTable && acceptByFields;
};

scout.ColumnUserFilter.prototype.filterActive = function() {
  return this.tableFilterActive() || this.fieldsFilterActive();
};

scout.ColumnUserFilter.prototype.tableFilterActive = function() {
  return this.selectedValues.length > 0;
};

/**
 * @interface
 */
scout.ColumnUserFilter.prototype.acceptByFields = function(key, normKey) {};

/**
 * @interface
 */
scout.ColumnUserFilter.prototype.fieldsFilterActive = function() {};

/**
 * @interface
 */
scout.ColumnUserFilter.prototype.updateFilterFields = function(event) {};
