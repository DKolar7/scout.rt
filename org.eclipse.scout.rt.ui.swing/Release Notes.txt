06.09.2010 imo
Renamed org.eclipse.scout.rt.ui.swing.ext.calendar.JTimeChooser to org.eclipse.scout.rt.ui.swing.ext.calendar.TimeChooser
Renamed org.eclipse.scout.rt.ui.swing.ext.calendar.JCalendar to org.eclipse.scout.rt.ui.swing.ext.calendar.DateChooser
Migration (occurs only in rare cases): Rename *.java files

15.12.2010 imo
Refactored the date time fields in order to use two fields when entering date and time.
Migration: None

15.12.2010 imo
Changed fields with dropdownbutton to single field with integrated drop down button
Migration: None

24.01.2011 dwi
Ticket 95'946
Visual markup for editable cells
Migration: None

27.01.2011 dwi
Problem:
In SwingScoutTable#prepareRenderer, evaluation of cell's editable state to draw respective marker icon caused loops and UI freeze.
So far, the only way to determine cell's editable state was to call AbstractColumn#isCellEditable(ITableRow). This required synchronization with model thread which affected performance badly. Even worse, if model thread was busy, the enqueued request did not succeed at all (timeout).
Solution:
- Property added to hold result of AbstractColumn#isCellEditable(ITableRow) which can be evaluated in UI thread without need of model thread synchronization.
- Population of property: Property is populated when AbstractColumn#decorateCellInternal is called.
- Change of ICellSpecialization and implementing classes: added ICellSpecialization$isEditable(), added ICellSpecialization#setEditable(boolean)
- Change of ICell and implementing classes: added ICell#isEditable()) -> default value is false
- Change of Cell: added Cell#isEditable(), added Cell#setEditableInternal(boolean). Accessor setEditableInternal(boolean) is internal by intention as not intended for public use as various checks in AbstractColumn#execIsEditable are bypassed otherwise (JavaDoc added). E.g., do not use in execDecorateCell.
- Change of SwingTableModel#isCellEditable() --> synchronization with model thread not neccessary anymore as property can be evaluated thread safe. (Java bean property)
- Change of SwingScoutTable#prepareRenderer() --> synchronization with model thread for querying editable state not neccessary anymore as property can be evaluated thread safe. (Java bean property)
Migration: None

10.02.2011 sle
see Release Notes in org.eclipse.scout.rt.client

02.03.2011 pba
#97045 removed the NOP-Switch in SwingScoutTable:handleKeyboardNavigationFromSwing. if the keyboardnavigation is undesired, do it via SwingScoutTable:setKeyboardNavigationFromScout

02.03.2011 pba
#98515 horizontal scrollbar is no longer missing for group boxes, if the getConfiguredScrollable is enabled

10.03.2011 imo
bsi ticket 99212
added support for the config.ini/eclipse.ini property "app.zone" in AbstractSwingEnvironment.decorateAppZone(Window w).
app.zone=prod | production (paints no special border around all dialogs and frames, this is the default)
app.zone=int | integration (paints a yellow border around all dialogs and frames)
app.zone=test (paints an orange border around all dialogs and frames)
app.zone=dev | development (paints a red border around all dialogs and frames)
