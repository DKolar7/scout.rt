06.09.2010 imo
Renamed org.eclipse.scout.rt.ui.swing.ext.calendar.JTimeChooser to org.eclipse.scout.rt.ui.swing.ext.calendar.TimeChooser
Renamed org.eclipse.scout.rt.ui.swing.ext.calendar.JCalendar to org.eclipse.scout.rt.ui.swing.ext.calendar.DateChooser
Migration (occurs only in rare cases): Rename *.java files

15.12.2010 imo
Refactored the date time fields in order to use two fields when entering date and time.
Migration: None

15.12.2010 imo
Changed fields with dropdownbutton to single field with integrated drop down button
Migration: None

24.01.2011 dwi
Ticket 95'946
Visual markup for editable cells
Migration: None

27.01.2011 dwi
Problem:
In SwingScoutTable#prepareRenderer, evaluation of cell's editable state to draw respective marker icon caused loops and UI freeze.
So far, the only way to determine cell's editable state was to call AbstractColumn#isCellEditable(ITableRow). This required synchronization with model thread which affected performance badly. Even worse, if model thread was busy, the enqueued request did not succeed at all (timeout).
Solution:
- Property added to hold result of AbstractColumn#isCellEditable(ITableRow) which can be evaluated in UI thread without need of model thread synchronization.
- Population of property: Property is populated when AbstractColumn#decorateCellInternal is called.
- Change of ICellSpecialization and implementing classes: added ICellSpecialization$isEditable(), added ICellSpecialization#setEditable(boolean)
- Change of ICell and implementing classes: added ICell#isEditable()) -> default value is false
- Change of Cell: added Cell#isEditable(), added Cell#setEditableInternal(boolean). Accessor setEditableInternal(boolean) is internal by intention as not intended for public use as various checks in AbstractColumn#execIsEditable are bypassed otherwise (JavaDoc added). E.g., do not use in execDecorateCell.
- Change of SwingTableModel#isCellEditable() --> synchronization with model thread not neccessary anymore as property can be evaluated thread safe. (Java bean property)
- Change of SwingScoutTable#prepareRenderer() --> synchronization with model thread for querying editable state not neccessary anymore as property can be evaluated thread safe. (Java bean property)
Migration: None

10.02.2011 sle
see Release Notes in org.eclipse.scout.rt.client

02.03.2011 pba
#97045 removed the NOP-Switch in SwingScoutTable:handleKeyboardNavigationFromSwing. if the keyboardnavigation is undesired, do it via SwingScoutTable:setKeyboardNavigationFromScout

02.03.2011 pba
#98515 horizontal scrollbar is no longer missing for group boxes, if the getConfiguredScrollable is enabled

10.03.2011 imo
bsi ticket 99212
added support for the config.ini/eclipse.ini property "app.zone" in AbstractSwingEnvironment.decorateAppZone(Window w).
app.zone=prod | production (paints no special border around all dialogs and frames, this is the default)
app.zone=int | integration (paints a yellow border around all dialogs and frames)
app.zone=test (paints an orange border around all dialogs and frames)
app.zone=dev | development (paints a red border around all dialogs and frames)

11.03.2011 bsh
- ColorUtility: Added a method to "multiply" two colors (instead of merging them). See JavaDoc for details.
- ColorUtility: All methods are now null-safe.
- SwingScoutTable: Fixed calculation of resulting foreground and background color when a row is selected (merge -> multiply).
Migration: None

03.05.2011 dwi
fixed ticket #92911
Problem: Fixed that LABEL_POSITION_ON_FIELD has no effect on multiline string fields
Migration: None

04.05.2011 imo
Added async loading of backend smartfield lookup calls for better performance on slow lookup services

10.05.2011 jgu
Moved the methods in org.eclipse.scout.rt.ui.swing.ext.LookAndFeelUtility provided under LGPL to org.eclipse.scout.rt.ui.swing.laf.rayo.painters.RayoLookAndFeelUtility:
public static Color darker(Color color, double ratio);
public static Color lighter(Color color, double ratio);
public static Color blend(Color color1, Color color2);
public static Color blend(Color color1, Color color2, double ratio);

Migration:
If you use any of the above methods, use the RayoLookAndFeelUtility or the original source: http://geosoft.no/software/colorutil/ColorUtil.java.html

11.05.2011 jgu
bsi ticket 102027
RayoLookAndFeelUtility removed again and added lighter/darker to org.eclipse.scout.rt.ui.swing.basic.ColorUtility to avoid duplicate code (suggested by bsh).
public static Color lighter(Color color, float ratio);
public static Color darker(Color color, float ratio)

Migration:
If you use any of the deleted methods in LookAndFeelUtility, use the ColorUtility or the original source: http://geosoft.no/software/colorutil/ColorUtil.java.html

16.05.2011 sle
bsi ticket 101'225
When the value of an checkbox is changed in the ui and the model throws an VetoException, the exclamation mark and the error status is set on the checkbox. The Checkbox
is also set back to its original state. Problem: The user cannot unset/correct the error status.

Change: The value on the ui is kept on its state set from the user, so the user can correct it according to its error status/exclamation mark.

17.05.2011 imo
bsi ticket 102'175
When a user double-clicks on a row in a TablePage, the tree is automatically expanded, the corresponding node is selected, and the tree is scrolled, such that the selected node and as many as possible of its sub nodes are visible.
This behaviour is confusing when browsing trees with nodes that have long labels. The current implementation tries to move as much as possible of the target nodes rectangle to the visible area. For nodes that are on deeper levels, this means, that the tree is scrolled horizontally and the node is drawn on the left side of the tree border (Figures 1, 2). When the user wants to get back to the parent node, it might not be recognizable anymore.
The same applies, when getConfiguredScrollToSelection() is true, or the method scrollToSelection() is called manually.
The tree should only automatically scroll horizontally when the node would be completely off the right side of the tree's border. To prevent the tree from "jumping" too much around, only a small part of the node's label should be guaranteed to be drawn. The proposed patch (currently only for Swing, there might be better approaches...) uses a maximum of 30 pixels or 25% of the node's width. The result is more like what the user would expect.
Change: as proposer
Migration: None

18.05.2011 dwi
bsi ticket 100'036 / 100'037
When a user double-clicks on an entry on the time chooser popup field, the table cell switches into edit mode and the user cannot select the same entry again.
Solution:
- Swing table model of popup table changed to be not editable anymore and to have a typed date column
- changed behavior of time entry selection (in popup) to be the same as date entry selection on DateField.
  That implies that popup does not close, if user still holds the left mouse button pressed. Scout model is only updated and popup closed after releasing the mouse button.
  By holding the mouse button pressed, the user can now scroll across the time entry list for ease of usability.
Migration: None

06.06.211 sle
bugzilla 348678
bsi ticket 102'728
Smartfield Warn-Text: When a Smartfield-Proposal opens with more than the aloud rows a Warning apears. This is to close to the left border and the color is not styleable.
Solution: The SmartTableForm had a Label under the table. This label was removed and instead we use the existing TableStatus.
Migration: None

11.07.2011 aho
Ticket: 102'194 is about taking screen shots of forms. The problem is since the form is opened async the print event does not get to the form.
Solution:
Back event to notify the model once a screen shot is done. Furthermore a PrintApplicationAction is created to take screen shots of the whole application.
Migration:
none

18.07.2011 dwi
bugzilla 345184
bsi ticket 102'074, 101'202, 103'927, 104'140
Problem:18.07.2011 dwi
bugzilla 345184
bsi ticket 102'074, 101'202, 103'927, 104'140
Problem:
There is no distinct separation among the different Look And Feels. In practice, if using a L&F other than Rayo or Orson, some widgets (e.g. the header panel) partly look like Rayo, but not like the installed L&F.
Solution:
Scout should completely adhere the installed L&F.
To solve this ticket, some major changes where necessary to the SwingScoutRootFrame, SwingScoutToolBar and its attached controls. Also, all Scout specific icons are moved from the org.eclipse.scout.rt.client Plug-In to the respective UI / L&F Plug-Ins to conform the UI.
Changes:
  - Generally, icons in Scout are strongly referenced by their icon identifier defined in SwingIcons#XX, SwtIcons#XX, RwtIcons#XX or AbtractIcons#XX.
  - Icons are moved from org.eclipse.scout.rt.client to the respective UI Plug-Ins. The Swing and SWT Plug-In only contain OpenSource specific icons whereas L&F fragments L&F specific ones.
  - org.eclipse.scout.rt.ui.swing does not contain any Rayo / Orson specific UI definitions anymore. Those are outsourced to the respective L&F Plugins.
  - ISwingEnvironment is extended to install a custom NavigationWidgetPanel, ViewTabsBar and ToolTabsBar specific to the L&F. The default implementation does not draw these elements anymore, but uses native controls instead.
  - Added extension point *.scouticons to every UI Plug-in to easily replace Scout default icons like window, tray or navigation icons.
  - Scout icons which cannot be configured in application (by respective getConfigured method) are fetched by the UI Activator, not the environemnt anymore. Now, Swing and SWT behave the same way. Those icons can be replaced by the *.scouticons extension point.
  - Rayo and Orson have a different JTextWithFieldTransparentIcon to meet L&F specific requirements.
  - Rayo and Orson have a different DateField / TimeField to meet L&F specific requirements.
  - Rayo and Orson have a different ActionInjection / UIDefaultsInjector to meet L&F specific requirements.
  - Moved and renamed legacy UI classes to org.eclipse.scout.rt.ui.swing.orson as they only belong to Orson L&F.
  - removed icons from org.eclipse.scout.rt.ui.swing.bsi.fragment. The icons are contained in the respective L&F fragment.
  - added icons for Orson L&F to org.eclipse.scout.rt.ui.swing.laf.orson.fragment
  - added icons for Orson L&F to org.eclipse.scout.rt.ui.swing.laf.rayo.fragment
  - created Plug-In org.eclipse.scout.rt.ui.swing.orson to meet Orson specific requirements such as actions, formfields and Swing environment.
  - moved BSI specific Icons for SWT into org.eclipse.scout.rt.ui.swt.bsi.fragment
  - removed Plug-In com.bsiag.scout.rt.client.bsi.icons.fragment as not required anymore
Migration:
- Icons as CheckboxYes and CheckboxNo were removed from AbstractIcons. If required, add them to your project specific icons in your client Plug-In.
- Product specific icons were removed from Scout UI Plug-Ins and must be installed in project yourself. Thereto, copy icons attached to this mail (window16.png, window32.png, window48.png, window256.png, tray.gif) into your Swing Plugin, e.g. /resources/icons. If folder does not exist yet, create it and register it in build.properties to be exported for production. Open plugin.xml of Swing Plug-In and register those icons in extension org.eclipse.scout.rt.ui.swing.scouticons.
- Names of some icons in AbstractIcons were changed to gain consistency in naming: e.g. AbstractIcons.TimeFieldTime -> AbstractIcons.DateFieldTime, AbstractIcons.File -> AbstractIcons.FileChooserFieldFile
- Remove Plug-In com.bsiag.scout.rt.client.bsi.icons.fragment if used as those icons are located in respective L&F Plug-Ins.
If using Orson L&F:
  - create dependency to org.eclipse.scout.rt.ui.swing.orson from your Swing-Plug-In. Also include that Plug-In in the product file.
  - In SwingApplication, change LegacySwingEnvironment to OrsonSwingEnvironment.
  - Remove Plug-In com.bsiag.scout.rt.client.bsi.icons.fragment as those icons are contained in com.bsiag.scout.rt.client.bsi.icons.fragment.

25.07.2011 dwi
bugzilla 345184
bsi ticket 102'074
Problem:
- Support for toolbuttons in OpenSource Swing UI
- Tool button views may not only be positioned on East position, but also on South position. Therefore, remove collapse button on tool button panel and width synchronization. Move synchronization code into Rayo UI Plug-In.
- Tool buttons (not FormToolButtons) are not represented by Rayo L&F. Therefore, skip tool buttons which are not instanceof AbstractFormToolButton
- Factory methods for creating header detail panels are SwingScoutHeaderPanel specific and not of global interest in SwingEnvironment. The same applies to color and panel height settings. Move them to SwingScoutHeaderPanel.
- Height of Header panel should automatically be calculated based on installed L&F
Migration:
NONE

26.07.2011 dwi
bugzilla 353000
bsi ticket 104'381
Problem:
In UIDefaultsInjector, there are configured some NLS texts to overwrite JRE default texts and to register Scout texts to be referenced in UI components.
As injection of UI defaults is done while instantiating SwingApplication, but Locale is only set in Activator's start method, those text cannot be resolved in the proper language.
Solution:
- Moved call of execInitLocale() prior to creating SwingEnvironment
- Removed most of the Scout text registrations in UIDefaultsInjector and put NLS resolution directly into Scout UI components itself (legacy). This has the advantage, that projects can overwrite those texts by a global NLS provider registered in ClientSession.
- Added registration of a few texts in UIDefaultsInjectins that cannot be overwritten by global NLS provider. This is true for all texts resolved prior to ClientSession creation completet, e.g. login dialog.
Migration:
NONE

29.07.2011 dwi
bugzilla 352420
bsi ticket 104'189
Problem:
The height of the message box is too small if text of either intro or content is wider than the initial message box width and therefore needs to be wrapped.
Solution:
Preceding Swing size calculation, the span of the labels is constrained to the maximal display width of the message box. Thus, Swing is able to calculate the height correctly in respect to the wrapping text height.
In order to make the text reflow when being resized to a width greater than the initial size, the span is reset just after being enlarged the first time.
Migration:
None

12.08.2011 dwi
bsi ticket #100'300
Problem:
If having an editable column of the type boolean, values are rendered as checkboxes. When changing the value of that checkbox, the checkbox jumps from center position to the left edge. Furthermore, not the same checkbox widget is displayed as in non-edit mode.
Solution:
- Changed representation of checkbox to look the same in edit and non-edit mode.
- Fixed layout problems when changing from non-edit to edit-mode (checkbox positioning)
- Added VerticalAlignment on IBoolean column to align the checkbox in both directions, vertical and horizontal
- Fixed problems in LogicalGridLayout manager to round resulting floating numbers (center position caluculations) the same way as Java layout managers do. Otherwise, the checkbox is positioned differently in between of the layout managers which causes the checkbox to jump around.
- Fixed problems in inset calculation to look the same on the different L&F providers
Migration:
None

17.08.2011 dwi
bsi ticket #104'549
Problem:
If having Drag & Drop support configured on a table, the copy-paste (CTRL-C) functionality is broken.
Analysis:
- If no DND is configured, default Swing mechanism exports the content of the table to the clipboard.
- In case of having DND configured, a custom tranfer handler is installed which exports the content of the AbstractTable#execDrag to the clipboard.
  If only having drop functionality configured, nothing is exported to the clipboard at all.
Solution:
- To always have the very same output to the clipboard regardless of DND configured or not, a tranfer handler is installed permanently.
  Thereby, the export to the clipboard is changed to always consider the content of the table and not the output of the drag support.
  That is exactely as Swing default implementation works.
Migration:
None

17.08.2011 dwi [contributed by Kohler Silvio, BSI Business Systems Integration AG]
bsi ticket #104'228
Problem:
FileChooser looks different in folder and file-mode. That is because in folder-mode, always the Swing FileChooser is is used.
However, when opening a FileChooser in file-mode, there can be distinguished between using AWT or Swing FileChooser. That can be
configured in SwingEnvironment. By default, SwingEnvironment is configured to use an AWT dialog. That is why the FileChooser looks
different in folder and file-mode, respectively. That should be changed to look the same.
Solution:
SwingEnvironment changed to use Swing FileChooser by default.
Migration:
None

17.08.2011 dwi [contributed by Kohler Silvio, BSI Business Systems Integration AG]
bsi ticket #104'231
Problem:
When using the FileChooser with folder-mode and save-mode set to true, a message is prompted in case the selected folder does already exist.
The message asks the user whether to really overwrite the file.
In folder mode, this message makes no sense and should be removed.
Solution:
Fixed
Migration:
None