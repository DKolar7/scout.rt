14.07.2010 imo
Since model-based selection filtering leads to many defects and misunderstandings. See ticket 87693 and others (follow).
removed ITable.acceptSelection and AbstractTable.execAcceptSelection
removed ITree.acceptSelection and AbstractTree.execAcceptSelection
removed AbstractListBox.execAcceptSelection
removed AbstractTreeBox.execAcceptSelection
old:
      @Override
      protected boolean execAcceptSelection(ITreeNode node, Long value, int level) {
        return level >= 2;
      }
new:
      @Override
      protected void execFilterNewNode(ITreeNode newNode, int level) throws ProcessingException {
        newNode.setEnabled(level >= 2);
      }

14.07.2010 imo
Disabled rows on ITable and disabled nodes on ITree are (now) selectable, and support for context menus.

14.07.2010 imo
Changed model of listbox and treebox. The value (checked keys) is separated from the selection (table selection)
The (existing) checkable property is used to distinguish between listboxes with checkboxes and listboxes that behave like tables.
On checkable listboxes (normally multi-selection boxes) selecting a row is NOT the same as checking the rows checkbox.
On non-checkable listboxes (normally single-selection boxes) selecting a row is the same as checking the corresponding key.
renamed getConfiguredFilterSelectedRows to getConfiguredFilterCheckedRows
added ITableRow.isChecked
added ITableRow.setChecked
added ITreeNode.isChecked
added ITreeNode.setChecked
renamed all IListBox.*Select* to IListBox.*Check*
renamed all ITreeBox.*Select* to ITreeBox.*Check*
Migration:
Check all occurrences of ITable.setMultiSelect(true/false) and check if it is a listbox table.
Most such cases are replaced by ITable.setMultiCheck(true/false), except those where the listbox was set to non-checkable
either by getConfiguredCheckable(){return false;} or by getMyListBox().getTable().setCheckable(false);

14.07.2010 imo
Removed the ITable.getContextRow since this is now the same as getSelectedRow()
Removed the ITree.getContextNode since this is now the same as getSelectedNode()

14.07.2010 imo
Removed AbstractAction/AbstractMenu.getConfiguredNonSelectionAction() since this is obsolete now that disabled rows can be selected.

15.07.2010 imo
Removed table context row and tree context node
old:
    protected void execContextCellChanged(ITableRow row, IColumn col) throws ProcessingException {
      ...
    }
new:
  protected void execRowClick(ITableRow row) throws ProcessingException {
    IColumn col=getContextColumn();
    ...
  }

17.07.2010 imo
Merged Rayo and Scout core widget copies of DateField, TimeField. Created new combined popup window with date/time and a new analog clock.

20.07.2010 imo
Refactoring IGroupbox.isBorderEnabled and BORDER_DECORATION_NONE
Due to misleading naming and for better understanding
Migration:
RENAME AbstractGroupbox.getConfiguredBorderEnabled TO AbstractGroupbox.getConfiguredBorderVisible
RENAME IGroupbox.isBorderEnabled TO IGroupbox.isBorderVisible
RENAME IGroupbox.setBorderEnabled TO IGroupbox.setBorderVisible
RENAME IGroupbox.BORDER_DECORATION_NONE TO IGroupbox.BORDER_DECORATION_EMPTY.

20.07.2010 imo
Merged concepts of cyclic locking on swingscout compositions using only a scout-update lock and a ignore-scout-event set throughout all implementations.
Removed various separate optimistic locks.
Migration: none necessary

22.07.2010 imo
NEW property "Tray visible" on IDesktop
NEW broadcast event TYPE_TRAY_POPUP on DesktopEvent to collect menus for the tray
NEW method IDesktopUiFacade.fireTrayPopupFromUI to get the tray menus
NEW operation AbstractDesktop.execAddTrayMenus to contribute to the tray menu
Migration: none necessary

11.08.2010 imo
Added cache to Introspector.getBeanInfo: 500ms down to 1 ms
Saves 1 seconds on all forms when loading and storing
Migration: none necessary

19.08.2010 imo
Tuned Introspector.getBeanInfo: 1ms down to 0.05 ms
Saves 1-4 seconds on all forms when loading and storing
Migration: none necessary

20.08.2010 imo
Moved org.eclipse.scout.rt.client.ui.form.fields.htmlfield.HTMLUtility to org.eclipse.scout.commons.HTMLUtility
Migration: rename org.eclipse.scout.rt.client.ui.form.fields.htmlfield.HTMLUtility by org.eclipse.scout.commons.HTMLUtility

20.08.2010 imo
Ticket 92'775 revealed that WizardEvents for Suspend,Finish,Cancel are never fired and also not used, since they are subsumized under TYPE_CLOSED.
However, in order to find out under which condition the wizard was closed, there is a new property IWizard.getCloseType that returns the CloseType enum.
Migration: (rare) if really used, replace the WizardEvent types TYPE_CANCELLED, TYPE_SUSPENDED, TYPE_FINISHED by TYPE_CLOSED and use IWizard.getCloseType() for details.

30.08.2010 imo
Ticket 90'088
Dropped AbstractTable.execSortDataSource(IColumn[] sortColumns)
This operation is a legacy from scout 2 and is never and nowhere used.
Migration: if however used, please report to tools@bsiag.com

30.08.2010 abr
Ticket 93'106: Fixed visibility of the IOutlineTableForm when it is initialized.
Migration: none

30.08.2010 imo
Ticket 90'088
Reset of table columns was re-modeled to be more finegrained.
Merged AbstractTable.execResetColumnSortOrder with AbstractTable.execResetDisplayableColumns to
AbstractTable.execResetColumns(boolean visibility, boolean order, boolean sorting, boolean widths)
This operation is rarely used in custom code.
Migration: When using these operations, rename it and check the boolean argument as to what aspect is resetting.

30.08.2010 imo
Ticket 90'088
Additional table header menu for "Column Filter" similar to excel AutoFilter
Migration: None

07.09.2010 imo
Added new IForm display hint: DISPLAY_HINT_POPUP

13.09.2010 abr
Ticket 91'279
Added IColumn.isVisibleInternal() that is used to for storing a table column's UI preferences (uses visible only instead of visible && displayable && visibleGranted).
Migration: None

01.11.2010 pba
Added opportunity for lazy initialization of search forms on table pages.
Added org.eclipse.scout.rt.client.ui.desktop.outline.pages.AbstractPageWithTable.execInitSearchForm().
Migration: optional MOVE all your search form related initialization code form the execInitPage() method to execInitSearchForm().

20.12.2010 imo
Consolidation of date/time fields. The existing ITimeField is based on Double and is replaced by a new AbstractTimeField based on Date and subclassing AbstractDateField.
Migration: Usages of AbstractTimeField must be reviewed, form data fields must be changed from Double to Date.
Legacy support: AbstractTimeColumn and AbstractTimeField have setTimeValue/getTimeValue of type Double, the column accepts/tolerates Double and Date as values.

21.12.2010 imo
Extracted DataModel with entities and attributes out of AbstractComposerField and moved to org.eclipse.scout.rt.shared.data.model
Migration:
rename IComposerOp -> IDataModelAttributeOp
rename IComposerEntity -> IDataModelEntity
rename IComposerAttribute -> IDataModelAttribute
rename AbstractComposerEntity -> AbstractDataModelEntity
rename AbstractAttributeEntity -> AbstractDataModelAttribute
rename ComposerAttributeInjector -> DataModelAttributeInjector
rename ComposerConstants -> DataModelConstants
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.IDataModelAttributeOp -> org.eclipse.scout.rt.shared.data.model.IDataModelAttributeOp
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.IDataModelEntity -> org.eclipse.scout.rt.shared.data.model.IDataModelEntity
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.IDataModelAttribute -> org.eclipse.scout.rt.shared.data.model.IDataModelAttribute
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.AbstractDataModelEntity -> org.eclipse.scout.rt.shared.data.model.AbstractDataModelEntity
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.AbstractDataModelAttribute -> org.eclipse.scout.rt.shared.data.model.AbstractDataModelAttribute
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.DataModelAttributeInjector -> org.eclipse.scout.rt.shared.data.model.DataModelAttributeInjector
rename org.eclipse.scout.rt.shared.data.form.fields.composer.DataModelConstants -> org.eclipse.scout.rt.shared.data.model.DataModelConstants
rename getComposerAttributes()  -> getAttributes()
rename getComposerEntities()  -> getEntities()
rename setComposerAttribute(  -> setAttribute(
Move the composer data model to the shared area:
extract all entities/attributes from the composer to a new shared DataModel
In the composer implement execCreateDataModel
To convert between external entity and attribute ids use DataModelUtility.
For example: IDataModelEntity e=DataModelUtility.externalIdToEntity(builder.getDataModel(), entityNodeData.getEntityExternalId(), null)
Legacy:
There is legacy support with deprecated AbstractComposerAttribute and AbstractComposerEntity. Also inner attributes and entities of a composer field are still valid
and wrapped in a ComposerFieldDataModel.

21.12.2010 imo
renamed AbstractComposerAggregationField to AbstractDataModelAggregationField
renamed AbstractComposerOperatorField to AbstractDataModelOperatorField

27.12.2010 jgu
Change in field validation: Error status is set to WARN instead of ERROR when an invalid date is entered via date picker.
Affected Field Types: AbstractDateField, AbstractTimeField, AbstractDateTimeField

Problem:
Validation errors of text input in date fields lead to different results in the GUI than validation of date input (via date picker of keystrokes).
Invalid date input is not displayed in the text field whereas invalid text input is. In both cases an error icon is shown to indicate that the entered value is not valid.
In the case of date input, the date is not displayed in the text field, if it is invalid. When the field is re-validated and the previously entered value was valid, the field is valid again and the error disappears.
A user might not notice that his input value was not accepted, when working fast.

In both cases the model contains only valid values (as always) and an error status (IProcessingStatus.ERROR).

Solution:
If a date input is invalid, the error status is set to (IProcessingStatus.WARNING) to indicate that the selected value was not accepted, but there might still be a valid value in the text field.
The warn status only disappears, if a new date or text is entered.

This solution was chosen based on the following principles:
- The model should only contain valid values (as before)
- Text input should not be removed or changed when it is wrong (user experience).
- Date input should not be displayed in the text field, if invalid, because it may not be possible to format it and the date input may depend on the value in the model (keystrokes).

Migration: None

24.01.2011 dwi
By default, table cells that are disabled should not be editable.
Migration: None

27.01.2011 dwi
Problem:
In SwingScoutTable#prepareRenderer, evaluation of cell's editable state to draw respective marker icon caused loops and UI freeze.
So far, the only way to determine cell's editable state was to call AbstractColumn#isCellEditable(ITableRow). This required synchronization with model thread which affected performance badly. Even worse, if model thread was busy, the enqueued request did not succeed at all (timeout).
Solution:
- Property added to hold result of AbstractColumn#isCellEditable(ITableRow) which can be evaluated in UI thread without need of model thread synchronization.
- Population of property: Property is populated when AbstractColumn#decorateCellInternal is called.
- Change of ICellSpecialization and implementing classes: added ICellSpecialization$isEditable(), added ICellSpecialization#setEditable(boolean)
- Change of ICell and implementing classes: added ICell#isEditable()) -> default value is false
- Change of Cell: added Cell#isEditable(), added Cell#setEditableInternal(boolean). Accessor setEditableInternal(boolean) is internal by intention as not intended for public use as various checks in AbstractColumn#execIsEditable are bypassed otherwise (JavaDoc added). E.g., do not use in execDecorateCell.
- Change of SwingTableModel#isCellEditable() --> synchronization with model thread not neccessary anymore as property can be evaluated thread safe. (Java bean property)
- Change of SwingScoutTable#prepareRenderer() --> synchronization with model thread for querying editable state not neccessary anymore as property can be evaluated thread safe. (Java bean property)
Migration: None

10.02.2011 sle
In SWT Perspective-Handling was never really thought through and tested with more than one perspective and/or more than one scout-application running parallel. This was now done, implemented and tested with Kudi/Bap. (see Visio)
In general can be said, that now no perspective has to be active/open to run a scout-application. When the Workbench is started the existing scout-application will be started and the model-desktop open. As soon as the perspective is active execGuiAttached will be called on the model-desktop. When the perspective is closed execGuiDettached is called. When a perspective is reset detached/attached is called.

Change in Scout-Client:
- Everywhere desktop.isGuiAvailable() was called now desktop.isOpened() is called. For Swing there is no change, the two states are changed at the same location.
- AbstractDesktop.closeInternal goes through all open forms and calls removeForm
- IDesktopUIFacade has now fireDesktopResetFromUI anymore. This method was used from AbstractSwtEnvironment
- new Property on IForm: PROP_PERSPECTIVE_ID. This is used from SWT to ensure a form is opend in a chosen perspective. No use in Swing.

Migration: Swing-Gui: none / SWT-Gui: if application uses more than one perspective, changes may be necessary. Please consult with me (s.leicht@bsiag.com / 947)

10.02.2011 abr
bsi ticket 98'890
fixed model change counters running out of sync if unchecked exceptions are thrown.
Migration: None

16.02.2011 imo
Splitted ITableField tableStatus into tablePopulateStatus and tableSelectionStatus

01.03.2011 pba
#94708 added new Event public static final int TYPE_TABLE_POPULATED = 820;
to handle the case, when no rows are returned for the first select

03.03.2011 pba
bsi ticket #93948
if the Fileservice has a rootpath set, take it and not the relative one, otherwise it is impossible to give a target path independent of the workbench

04.03.2011 pba
bsi ticket #99504
Add menus in outline also for node-, not only table pages

04.03.2011 pba
bsi ticket #99533
add a reasonable default implementation for getBookmarkIdentifier() in AbstractPage to avoid caching bugs

10.03.2011 imo
bsi ticket 96627
do not activate disabled or invisible outlines when activating bookmark

18.03.2011 imo
Migration of legacy: moving remaining legacy logic from client to server
Added TokenBasedSearchFilter, TokenBasedSearchFilterService to support token-based query building on logical level.
Added LegacySearchFilterService to support global client side legacy handling of search behaviour.
Migration: None ( legacy search can still be used)
Continuous Migration:
1) Create an annotation for already migrated search forms: MigratedSearchForm
2) in every search form (or if using a custom base class) add:
  @Override
  protected void execResetSearchFilter(SearchFilter searchFilter) throws ProcessingException {
    if (getClass().isAnnotationPresent(MigratedSearchForm.class)) {
      // Migrated SearchForm
      setSearchFilter(new SearchFilter());
    }
    else {
      // Legacy SearchForm
      searchFilter = new LegacySearchFilter();
      setSearchFilter(searchFilter);
    }
    super.execResetSearchFilter(getSearchFilter());
  }


15.04.2011 dwi
[contributed by oca]
Problem:
Sometimes, not all calendar items supposed to be loaded into a calendar by an AbstractCalendarItemProvider (package org.eclipse.scout.rt.client.ui.basic.calendar.provider) are actually shown in the calendar due to race conditions.
Analysis:
During initialization of an AbstractCalendarItemProvider in its constructor, loadItemsAsyncInternal() is invoked twice:
- once via initConfig() -> setRefreshIntervalMillis()
- once via ensureItemsLoadedInternal()
If the asynchronous loading of the first invocation of loadItemsAsyncInternal() has not completed while the second invocation is taking place, the first invocation is canceled. However, the first invocation will try to reschedule another job. This will cause the second invocation to be canceled as well. If no m_minDateLoaded, m_maxDateLoaded were set yet, no other jobs are scheduled and the current instance will never provide any calendar items again.
Solution:
Rescheduling (and cancelling a currently running job) should only happen, if a previous job actually succeeded in loading the calendar items.
Migration: None

06.05.2011 imo
- added IClientSession.getWebSessionId for ajax like apps with gui-backend-to-server-backend communication using virtual sessionId
- associate state of service with client session instance / client session type for:
org.eclipse.scout.rt.client.services.common.bookmark.internal.BookmarkService (Done)
org.eclipse.scout.rt.client.services.common.clientnotification.internal.ClientNotificationConsumerService (Done)
org.eclipse.scout.rt.client.services.common.code.CodeServiceClientProxy (Done)
org.eclipse.scout.rt.client.services.common.exceptionhandler.internal.InternalClientExceptionHandlerService (Done)
org.eclipse.scout.rt.client.services.common.security.AccessControlServiceClientProxy (Done)
org.eclipse.scout.rt.client.services.common.security.PermissionServiceClientProxy (Done)
org.eclipse.scout.rt.client.services.common.session.internal.ClientSessionRegistryService (Done)
- added IClientSession.getWebSessionId to support for multi-session web guis such as rap/rwt, wicket, ajax
Migration: None
Except: If your project runs as web app (rap/rwt) make sure to refactor state of stateful services to be associated with each individual client session.
This is normally done as:
class MyStatefulService{
  private static final String SESSION_DATA_KEY = "bookmarkServiceState";

  private ServiceState getServiceState() {
    IClientSession session = ClientJob.getCurrentSession();
    if (session == null) {
      LOG.warn("could not find a client session");
      return null;
    }
    ServiceState data = (ServiceState) session.getData(SESSION_DATA_KEY);
    if (data == null) {
      data = new ServiceState();
      session.setData(SESSION_DATA_KEY, data);
    }
    return data;
  }

  ...

  private static class ServiceState {
    //this was the global state of the service when run in a single-user osgi
    EventListenerList m_listenerList = new EventListenerList();
    BookmarkData m_model;
  }
}

08.05.2011 dwi
bsi ticket #99504
Problem:
On the associated folder table of a AbstractPageWithNodes, there was no popup menu support.
Solution:
Added support to have the very same menus on the associated folder table as on the AbstractPageWithNodes itself.
There was some change necessary on ITable and ITree to obtain the validated menus from within the model
Methods added:
- ITree#fetchMenusForNodesInternal (AbstractTree#fetchMenusForNodesInternal)
- ITable#fetchMenusForRowsInternal (AbstractTable#fetchMenusForRowsInternal)
Methods changed:
- AbstractPageWithNodes$P_TableListener#tableChanged
Migration: None

06.05.2011 imo
Bugzilla Ticket 331535

Added possibility to override/complete texts and translations defined by the scout framework.
To fully enable this feature, the following adaptations are necessary:

0) Add the additional translations and text overrides to the project specific text resources:
Adapt Texts_*.properties files in your scout project (com.example.myapp.shared/resources/texts) by adding
the same keys as defined by the scout framework (org.eclipse.scout.rt.shared/resources/texts/ScoutTexts.properties)
with your own translations.

1) Override method getNlsTexts in ClientSession:

  @Override
  public DynamicNls getNlsTexts(){
    return Texts.getInstance();
  }

2) Override method getNlsTexts in ServerSession:

  @Override
  public DynamicNls getNlsTexts(){
    return Texts.getInstance();
  }

3) Only required for Swing client: override createSwingEnvironment() in class SwingApplication:
- set the global text provider for Swing with SwingUtility.setNlsTexts
- call execInitLocale() to initialize the NlsLocale as stored in the UserPreferences

  @Override
  protected ISwingEnvironment createSwingEnvironment(){
    execInitLocale();
    SwingUtility.setNlsTexts(Texts.getInstance());
    return new SwingEnvironment();
  }

11.05.2011 sle
bsi ticket #101160
Added convenience methods to ITable as known from deprecated ICheckableTable. Also added know possibility to configure
a invisible "checkbox-column" for data-transportation to server via formData.
Methods added:
ITable:
- void checkRow(int rowIndex, boolean value) throws ProcessingException;
- void checkRow(ITableRow row, boolean value) throws ProcessingException;
- void checkRows(ITableRow[] rows, boolean value) throws ProcessingException;
- void checkAllRows() throws ProcessingException;
- void uncheckAllRows() throws ProcessingException;

- void setCheckableColumn(IBooleanColumn checkboxColumn); (for internal use)
- IBooleanColumn getCheckableColumn(); (for internal use)

AbstractTable:
- protected Class<? extends AbstractBooleanColumn> getConfiguredCheckableColumn();
Migration: None

17.05.2011 sle
bsi ticket 102'010: ScoutInfoForm looks ugly (in SWT)
Problem:
a) ScoutInfoForm does not look nice in SWT
b) ... does not have a Default-Logo
c) ... has a quirky way of getting the logo.

Solution:
a) In Swing the GridData is different than for the other ui-layers.
b) The Bundle org.eclipse.scout.rt.client has now a Default-Logo.
c) The Logo is searched with th IconLocator.

Migration:
If ScoutInfoForm is overwritten to be able to get the correct logo this is not necessary anymore. Just the IIconProviderService
has to be registered and an Icon with the name application_logo_large.png must be in a bundle.

25.05.2011 dwi
bsi ticket 102'437: support for adding child entities on entity nodes of extended search
Problem:
Child entities do not appear on popup menu when being on an entity node
Solution:
changed AbstractComposerField#execCreateAttributeNode
changed AbtractComposerNode#attachAddEntityMenus
changed constructor of AttributeNode
changed constructor of EntityNode
Migration:
None

30.05.2011 imo
Added explicit instead of implicit session argument to IClientNotificationConsumerService observer, added possibility to add global observer.
See javadoc for more details.
Migration:
Review deprecated usages of IClientNotificationConsumerService.addClientNotificationConsumerListener and IClientNotificationConsumerService.addClientNotificationConsumerListener.
Default simply adds "ClientJob.getCurrentSession()" as first argument.

30.05.2011 imo
bsi ticket 100940
A menu opened in empty space should not consider any selection on a row.
Thus the menu should open anyway (not querying the selection status of any row).
Migration:
None

06.06.211 sle
bugzilla 348678
bsi ticket 102'728
Smartfield Warn-Text: When a Smartfield-Proposal opens with more than the aloud rows a Warning apears. This is to close to the left border and the color is not styleable.
Solution: The SmartTableForm had a Label under the table. This label was removed and instead we use the existing TableStatus.
Migration: None

09.06.2011 imo
bsi ticket 102823
do not activate disabled tree nodes when setting new outline on desktop
Migration: None

28.06.2011 dwi
bsi ticket #99'948 / #100'755
Problem:
If user cancels current running jobs, associated running SQL statements should also be killed.
Solution:
Added support to kill associated running JDBC statements if client job gets canceled.
In StatementProcessor, statements to be executed are registered in RunningStatementStore on behalf of the current session.
If a ClientJob gets canceled, a subsequent fire-and-forget cancel request is triggered to cancel registered statements.
Resources changed:
org.eclipse.scout.rt.client
- InternalHttpServiceTunnel changed (cancel support for online servermode)
- plugin.xml changed (registration of cancel processing service)
com.bsiag.scout.shared
- IServerProcessingCancelService added (service interface of cancel processing service)
org.eclipse.scout.rt.server
- ServerProcessingCancelService added (service implementation of cancel processing service)
- RunningStatementStore added (store to hold currently running statements)
- StatementProcessor changed to register / unregister currently running statements
Migration: None

01.07.2011 dwi
bsi ticket: #103'490
bugzilla ticket: 350661
Problem:
When setting a new nls local via ClientUIPreferences, the changed entry is not
flushed to disk, i.e. causing the old entry to still exits. Other changes made,
e.g. updateTableColumnOrder, are flushed immediately.
Solution:
Changed ClientUiPreferences#setNlsLocale(NlsLocale) to flush value to disk
Migration: None