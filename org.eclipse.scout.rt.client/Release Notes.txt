14.07.2010 imo
Since model-based selection filtering leads to many defects and misunderstandings. See ticket 87693 and others (follow).
removed ITable.acceptSelection and AbstractTable.execAcceptSelection
removed ITree.acceptSelection and AbstractTree.execAcceptSelection
removed AbstractListBox.execAcceptSelection
removed AbstractTreeBox.execAcceptSelection
old:
      @Override
      protected boolean execAcceptSelection(ITreeNode node, Long value, int level) {
        return level >= 2;
      }
new:
      @Override
      protected void execFilterNewNode(ITreeNode newNode, int level) throws ProcessingException {
        newNode.setEnabled(level >= 2);
      }

14.07.2010 imo
Disabled rows on ITable and disabled nodes on ITree are (now) selectable, and support for context menus.

14.07.2010 imo
Changed model of listbox and treebox. The value (checked keys) is separated from the selection (table selection)
The (existing) checkable property is used to distinguish between listboxes with checkboxes and listboxes that behave like tables.
On checkable listboxes (normally multi-selection boxes) selecting a row is NOT the same as checking the rows checkbox.
On non-checkable listboxes (normally single-selection boxes) selecting a row is the same as checking the corresponding key.
renamed getConfiguredFilterSelectedRows to getConfiguredFilterCheckedRows
added ITableRow.isChecked
added ITableRow.setChecked
added ITreeNode.isChecked
added ITreeNode.setChecked
renamed all IListBox.*Select* to IListBox.*Check*
renamed all ITreeBox.*Select* to ITreeBox.*Check*
Migration:
Check all occurrences of ITable.setMultiSelect(true/false) and check if it is a listbox table.
Most such cases are replaced by ITable.setMultiCheck(true/false), except those where the listbox was set to non-checkable
either by getConfiguredCheckable(){return false;} or by getMyListBox().getTable().setCheckable(false);

14.07.2010 imo
Removed the ITable.getContextRow since this is now the same as getSelectedRow()
Removed the ITree.getContextNode since this is now the same as getSelectedNode()

14.07.2010 imo
Removed AbstractAction/AbstractMenu.getConfiguredNonSelectionAction() since this is obsolete now that disabled rows can be selected.

15.07.2010 imo
Removed table context row and tree context node
old:
    protected void execContextCellChanged(ITableRow row, IColumn col) throws ProcessingException {
      ...
    }
new:
	protected void execRowClick(ITableRow row) throws ProcessingException {
	  IColumn col=getContextColumn();
	  ...
	}

17.07.2010 imo
Merged Rayo and Scout core widget copies of DateField, TimeField. Created new combined popup window with date/time and a new analog clock.

20.07.2010 imo
Refactoring IGroupbox.isBorderEnabled and BORDER_DECORATION_NONE
Due to misleading naming and for better understanding
Migration:
RENAME AbstractGroupbox.getConfiguredBorderEnabled TO AbstractGroupbox.getConfiguredBorderVisible
RENAME IGroupbox.isBorderEnabled TO IGroupbox.isBorderVisible
RENAME IGroupbox.setBorderEnabled TO IGroupbox.setBorderVisible
RENAME IGroupbox.BORDER_DECORATION_NONE TO IGroupbox.BORDER_DECORATION_EMPTY.

20.07.2010 imo
Merged concepts of cyclic locking on swingscout compositions using only a scout-update lock and a ignore-scout-event set throughout all implementations.
Removed various separate optimistic locks.
Migration: none necessary

22.07.2010 imo
NEW property "Tray visible" on IDesktop
NEW broadcast event TYPE_TRAY_POPUP on DesktopEvent to collect menus for the tray
NEW method IDesktopUiFacade.fireTrayPopupFromUI to get the tray menus
NEW operation AbstractDesktop.execAddTrayMenus to contribute to the tray menu
Migration: none necessary

11.08.2010 imo
Added cache to Introspector.getBeanInfo: 500ms down to 1 ms
Saves 1 seconds on all forms when loading and storing
Migration: none necessary

19.08.2010 imo
Tuned Introspector.getBeanInfo: 1ms down to 0.05 ms
Saves 1-4 seconds on all forms when loading and storing
Migration: none necessary

20.08.2010 imo
Moved org.eclipse.scout.rt.client.ui.form.fields.htmlfield.HTMLUtility to org.eclipse.scout.commons.HTMLUtility
Migration: rename org.eclipse.scout.rt.client.ui.form.fields.htmlfield.HTMLUtility by org.eclipse.scout.commons.HTMLUtility

20.08.2010 imo
Ticket 92'775 revealed that WizardEvents for Suspend,Finish,Cancel are never fired and also not used, since they are subsumized under TYPE_CLOSED.
However, in order to find out under which condition the wizard was closed, there is a new property IWizard.getCloseType that returns the CloseType enum.
Migration: (rare) if really used, replace the WizardEvent types TYPE_CANCELLED, TYPE_SUSPENDED, TYPE_FINISHED by TYPE_CLOSED and use IWizard.getCloseType() for details.

30.08.2010 imo
Ticket 90'088
Dropped AbstractTable.execSortDataSource(IColumn[] sortColumns)
This operation is a legacy from scout 2 and is never and nowhere used.
Migration: if however used, please report to tools@bsiag.com

30.08.2010 abr
Ticket 93'106: Fixed visibility of the IOutlineTableForm when it is initialized.
Migration: none

30.08.2010 imo
Ticket 90'088
Reset of table columns was re-modeled to be more finegrained.
Merged AbstractTable.execResetColumnSortOrder with AbstractTable.execResetDisplayableColumns to
AbstractTable.execResetColumns(boolean visibility, boolean order, boolean sorting, boolean widths)
This operation is rarely used in custom code.
Migration: When using these operations, rename it and check the boolean argument as to what aspect is resetting.

30.08.2010 imo
Ticket 90'088
Additional table header menu for "Column Filter" similar to excel AutoFilter
Migration: None

07.09.2010 imo
Added new IForm display hint: DISPLAY_HINT_POPUP

13.09.2010 abr
Ticket 91'279
Added IColumn.isVisibleInternal() that is used to for storing a table column's UI preferences (uses visible only instead of visible && displayable && visibleGranted).
Migration: None

01.11.2010 pba
Added opportunity for lazy initialization of search forms on table pages.
Added org.eclipse.scout.rt.client.ui.desktop.outline.pages.AbstractPageWithTable.execInitSearchForm().
Migration: optional MOVE all your search form related initialization code form the execInitPage() method to execInitSearchForm().

20.12.2010 imo
Consolidation of date/time fields. The existing ITimeField is based on Double and is replaced by a new AbstractTimeField based on Date and subclassing AbstractDateField.
Migration: Usages of AbstractTimeField must be reviewed, form data fields must be changed from Double to Date.
Legacy support: AbstractTimeColumn and AbstractTimeField have setTimeValue/getTimeValue of type Double, the column accepts/tolerates Double and Date as values.

21.12.2010 imo
Extracted DataModel with entities and attributes out of AbstractComposerField and moved to org.eclipse.scout.rt.shared.data.model
Migration:
rename IComposerOp -> IDataModelAttributeOp
rename IComposerEntity -> IDataModelEntity
rename IComposerAttribute -> IDataModelAttribute
rename AbstractComposerEntity -> AbstractDataModelEntity
rename AbstractAttributeEntity -> AbstractDataModelAttribute
rename ComposerAttributeInjector -> DataModelAttributeInjector
rename ComposerConstants -> DataModelConstants
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.IDataModelAttributeOp -> org.eclipse.scout.rt.shared.data.model.IDataModelAttributeOp
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.IDataModelEntity -> org.eclipse.scout.rt.shared.data.model.IDataModelEntity
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.IDataModelAttribute -> org.eclipse.scout.rt.shared.data.model.IDataModelAttribute
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.AbstractDataModelEntity -> org.eclipse.scout.rt.shared.data.model.AbstractDataModelEntity
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.AbstractDataModelAttribute -> org.eclipse.scout.rt.shared.data.model.AbstractDataModelAttribute
rename org.eclipse.scout.rt.client.ui.form.fields.composer.attribute.DataModelAttributeInjector -> org.eclipse.scout.rt.shared.data.model.DataModelAttributeInjector
rename org.eclipse.scout.rt.shared.data.form.fields.composer.DataModelConstants -> org.eclipse.scout.rt.shared.data.model.DataModelConstants
rename getComposerAttributes()  -> getAttributes()
rename getComposerEntities()  -> getEntities()
rename setComposerAttribute(  -> setAttribute(
Move the composer data model to the shared area:
extract all entities/attributes from the composer to a new shared DataModel
In the composer implement execCreateDataModel
To convert between external entity and attribute ids use DataModelUtility.
For example: IDataModelEntity e=DataModelUtility.externalIdToEntity(builder.getDataModel(), entityNodeData.getEntityExternalId(), null)
Legacy:
There is legacy support with deprecated AbstractComposerAttribute and AbstractComposerEntity. Also inner attributes and entities of a composer field are still valid
and wrapped in a ComposerFieldDataModel.

21.12.2010 imo
renamed AbstractComposerAggregationField to AbstractDataModelAggregationField
renamed AbstractComposerOperatorField to AbstractDataModelOperatorField

27.12.2010 jgu
Change in field validation: Error status is set to WARN instead of ERROR when an invalid date is entered via date picker.
Affected Field Types: AbstractDateField, AbstractTimeField, AbstractDateTimeField

Problem:
Validation errors of text input in date fields lead to different results in the GUI than validation of date input (via date picker of keystrokes).
Invalid date input is not displayed in the text field whereas invalid text input is. In both cases an error icon is shown to indicate that the entered value is not valid.
In the case of date input, the date is not displayed in the text field, if it is invalid. When the field is re-validated and the previously entered value was valid, the field is valid again and the error disappears.
A user might not notice that his input value was not accepted, when working fast.

In both cases the model contains only valid values (as always) and an error status (IProcessingStatus.ERROR).

Solution:
If a date input is invalid, the error status is set to (IProcessingStatus.WARNING) to indicate that the selected value was not accepted, but there might still be a valid value in the text field.
The warn status only disappears, if a new date or text is entered.

This solution was chosen based on the following principles:
- The model should only contain valid values (as before)
- Text input should not be removed or changed when it is wrong (user experience).
- Date input should not be displayed in the text field, if invalid, because it may not be possible to format it and the date input may depend on the value in the model (keystrokes).

Migration: None

24.01.2011 dwi
By default, table cells that are disabled should not be editable.
Migration: None

27.01.2011 dwi
Problem:
In SwingScoutTable#prepareRenderer, evaluation of cell's editable state to draw respective marker icon caused loops and UI freeze.
So far, the only way to determine cell's editable state was to call AbstractColumn#isCellEditable(ITableRow). This required synchronization with model thread which affected performance badly. Even worse, if model thread was busy, the enqueued request did not succeed at all (timeout).
Solution:
- Property added to hold result of AbstractColumn#isCellEditable(ITableRow) which can be evaluated in UI thread without need of model thread synchronization.
- Population of property: Property is populated when AbstractColumn#decorateCellInternal is called.
- Change of ICellSpecialization and implementing classes: added ICellSpecialization$isEditable(), added ICellSpecialization#setEditable(boolean)
- Change of ICell and implementing classes: added ICell#isEditable()) -> default value is false
- Change of Cell: added Cell#isEditable(), added Cell#setEditableInternal(boolean). Accessor setEditableInternal(boolean) is internal by intention as not intended for public use as various checks in AbstractColumn#execIsEditable are bypassed otherwise (JavaDoc added). E.g., do not use in execDecorateCell.
- Change of SwingTableModel#isCellEditable() --> synchronization with model thread not neccessary anymore as property can be evaluated thread safe. (Java bean property)
- Change of SwingScoutTable#prepareRenderer() --> synchronization with model thread for querying editable state not neccessary anymore as property can be evaluated thread safe. (Java bean property)
Migration: None

10.02.2011 abr
bsi ticket 98'890
fixed model change counters running out of sync if unchecked exceptions are thrown.
Migration: None

16.02.2011 imo
Splitted ITableField tableStatus into tablePopulateStatus and tableSelectionStatus

20.02.2011 dwi
org.eclipse.scout.rt.client
DefaultWizardStatusHtmlProvider > Bug-Fix: display of step number within wrapping step names


04.03.2011 pba
bsi ticket #99533
add a reasonable default implementation for getBookmarkIdentifier() in AbstractPage to avoid caching bugs

07.03.2011 pba
bsi ticket #99628
apply date format for a value newly set in a date(time) field in order to remove undesired seconds and milliseconds

10.03.2011 pba
bsi ticket #97852
replace rows in tables: if the new row is shorter than the row to be replaced, then text & value of the old row will be set to null for the cells, where no new cell is available

10.03.2011 pba
bsi ticket #99562
BookmarkUtiliy ensures, that a search form is started as soon as the table page is accessed

10.03.2011 hmu
bsi ticket #99'785
remove all custom columns implemented. Instead o implementing ITableCustomizer extends AbstractTableCustomizer, this class contains an empty implementation of the interface

10.03.2011 imo
bsi ticket 96627
do not activate disabled or invisible outlines when activating bookmark

18.03.2011 imo
Migration of legacy: moving remaining legacy logic from client to server
Added TokenBasedSearchFilter, TokenBasedSearchFilterService to support token-based query building on logical level.
Added LegacySearchFilterService to support global client side legacy handling of search behaviour.
Migration: None
