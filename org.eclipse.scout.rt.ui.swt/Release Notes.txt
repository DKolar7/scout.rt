28.09.2010 sle
In our project we had the problem, that from two different Applications two KeyStrokeManager where instanciated. The KeyStrokeManager were not
aware of the SwtEnvironment where they were instatiatetd from. This resulted that key-strokes where "used" two times.
Problem: If one would close a SmartfieldProposal with an esc-keystroke, the whole form would close.
Solution: The KeyStrokeManager is aware of the SwtEnvironment where it was instaciated and gives the environment to the filters.
old:
      getEnvironment().addKeyStrokeFilter(textField, new ISwtKeyStrokeFilter(){
        @Override
        public boolean accept(Event e){
          return doSomething();
        }
      });
new:
      getEnvironment().addKeyStrokeFilter(textField, new ISwtKeyStrokeFilter(){
        @Override
        public boolean accept(Event e, ISwtEnvironment environment){
          if(getEnvironment().equals(environment)){
            return doSomething();
          }
          return false;
        }
      });

10.02.2011 sle
see Release Notes in org.eclipse.scout.rt.client

26.04.2011 cgu
[contributed by cgu Guglielmo Claudio, BSI Systems Integration AG, Switzerland]
Problem:
The behavior of displaying the status of a table changed sometime in 2010. In order to display the status the “old” way one needs access to the status line of every open view and editor.
Solution:
Extended ISwtEnvironment with a method setStatusLineMessage.
Migration: If you used the method ISwtScoutPart.setStatus you have to adjust your code as following: part.setStatusLineMessage(null, status.getMessage());
