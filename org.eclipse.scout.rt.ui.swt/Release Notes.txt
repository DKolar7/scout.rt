28.09.2010 sle
In our project we had the problem, that from two different Applications two KeyStrokeManager where instanciated. The KeyStrokeManager were not
aware of the SwtEnvironment where they were instatiatetd from. This resulted that key-strokes where "used" two times.
Problem: If one would close a SmartfieldProposal with an esc-keystroke, the whole form would close.
Solution: The KeyStrokeManager is aware of the SwtEnvironment where it was instaciated and gives the environment to the filters.
old:
      getEnvironment().addKeyStrokeFilter(textField, new ISwtKeyStrokeFilter(){
        @Override
        public boolean accept(Event e){
          return doSomething();
        }
      });
new:
      getEnvironment().addKeyStrokeFilter(textField, new ISwtKeyStrokeFilter(){
        @Override
        public boolean accept(Event e, ISwtEnvironment environment){
          if(getEnvironment().equals(environment)){
            return doSomething();
          }
          return false;
        }
      });

10.02.2011 sle
see Release Notes in org.eclipse.scout.rt.client

26.04.2011 cgu
[contributed by cgu Guglielmo Claudio, BSI Systems Integration AG, Switzerland]
Problem:
The behavior of displaying the status of a table changed sometime in 2010. In order to display the status the “old” way one needs access to the status line of every open view and editor.
Solution:
Extended ISwtEnvironment with a method setStatusLineMessage.
Migration: If you used the method ISwtScoutPart.setStatus you have to adjust your code as following: part.setStatusLineMessage(null, status.getMessage());

01.07.2011 aho
Ticket 101'754 focused on some selection problems in the JFace(SWT) tree. The JFace tree forces the selection of the next (null) element when a selected tree item gets removed. This SWT event gets scheduled after the model code is executed.
The problem was when a tree node gets removed and another node gets selected within the same model method (e.g. execAction on a menu) the selection is not visible in the UI.
Solution:
While updating node structures forced by a model event the SWT selection events getting ignored
Migration:
None

11.07.2011 aho
Ticket: 102'194 is about taking screen shots of forms. The problem is since the form is opened async the print event does not get to the form.
Solution:
Back event to notify the model once a screen shot is done. Furthermore a PrintApplicationAction is created to take screen shots of the whole application.
Migration:
none

10.08.2011 abr
Bugzilla Ticket 354350
BSI Ticket 104'974
Problem:
The SwtScoutHtmlField transforms the document to display into an UTF-8 encoded byte array. If the transformed document contains a meta-tag "Content-Type"
defining an encoding other than UTF-8 or if the default encoding of the underlying (default) browser is not UTF-8, invalid characters may displayed.
Solution:
The document to be displayed is augmented by an UTF-8 Content-Type definition of a possibly already existing one is rewritten
(modified org.eclipse.scout.rt.ui.swt.AbstractSwtEnvironment.styleHtmlText(Control, String)).
Migration:
none

22.08.2011 dwi
BSI ticket #105'026, #104'976
Problem:
- Failed to display corrupt HTML pages (e.g. if missing closing quote in style definition)
- In HTML editor, no cleanup (auto-correction) should be applied to the given HTML. That is because if the user did some modifications in the HTML source and reloads the HTML in the editor anew, unwanted auto-corrections would be applied.
Solution:
- Accomplish consistency concerning HTML styling (cleanup) in between of Swing and SWT in regard of ScoutHtmlField and ScoutHmtEditor.
  In more detail, this entails the following:
  - Before passing the HTML to the respective widget (ScoutHtmlEditor, ScoutHtmlField), Abstract[Swing|Swt]Environment#styleHtmlText() is called to cleanup the given HTML.
  - In case of HTML editor mode, no modifications are applied to the given HTML in both, Swing and SWT, respectively.
  - However, in non-editor mode, some intelligence is applied to the HTML to ensure proper display of the HTML document.
    - In Swing, cleanup of HTML structure and CSS definitions is done. That is crucial as Swing HTML viewer has some problems with some CSS constructs.
    - In SWT, OS default browser is used. That is why cleanup of CSS is not necessary as done by browser itself.
      But, because the HTML is provided as file to the browser, proper encoding and charset must be set.
- Failsafe: if HTML text cannot be parsed for cleanup, the raw HTML text is used instead of an exception thrown.
- Consolidation of HTML cleanup functionality in HTMLUtility for plain and simple use that is applicable for both, SWT and Swing, respectively. That is why various methods in HtmlUtility are marked deprecated and will be removed in next Scout release.
Plug-Ins affected:
- org.eclipse.scout.commons (HTMLUtility
- org.eclipse.scout.rt.client (AbstractHtmlField)
- org.eclipse.scout.rt.ui.swing (AbstractSwingEnvironment, SwingScoutHtmlField, SwingScoutMailField)
- org.eclipse.scout.rt.ui.swing.bsi.fragment (SwingScoutHtmlEditor)
- org.eclipse.scout.rt.ui.swt (AbstractSwtEnvironment, SwtScoutHtmlField)
- org.eclipse.scout.rt.ui.swt.bsi.fragment (SwtScoutHtmlEditor)
Migration Swing: None
Migration SWT:
- In AbstractSwtEnvironment, the following methods are removed as not required anymore because logic is encapsulated in HTMLUtility.
  - AbstractSwtEnvironment#styleHtmlText(Control, String)
  - AbstractSwtEnvironment#createCSS(Control)
  - AbstractSwtEnvironment#createHtmlDocument(String, String)
Migration Swing / SWT (optional):
- In HTMLUtility, the following methods are marked deprecated. They will be removed in next Scout release.
  - HTMLUtility#parseDocument(String) to be replaced by HTMLUtility.toHtmlDocument(String)
  - HTMLUtility#formatDocument(String) to be replaced by HTMLUtility.toHtmlText(HTMLDocument)
  - HTMLUtility#cleanupDocument(HTMLDocument, String, int) to be replaced by HTMLUtility.cleanupHtml(String, boolean,boolean, DefaultFont)
  - HTMLUtility#wellformDocument(HTMLDocument, String, int) to be replaced by HTMLUtility.cleanupHtml(String, boolean,boolean, DefaultFont)

24.08.2011 imo
bsi ticket 102089, bug 355669
Problem:
When a listbox or treebox is checkable=true then it shows checkmarks as icons.
However if the listbox also has an icon defined either directly on the listbox
or via its data provider (codetype/lookupcall), then this icon is not shown.
Solution:
In this (rare) case both icons are displayed as a composite icon.
Since this is a behaviour change (even though a positive enhancement)
this feature must be activated in eclipse scout 3.7 using the config.ini property:
scout.fix355669=true
Migration:
None

25.08.2011 dwi
BSI ticket #105'026
Problem:
Default font specific issues in HTML cleanup which is applied to the HTML text prior being provided to AbstractHtmlField:
 - Application specific default font settings should always be applied to body style definition if not specified yet
 - default font size unit on SWT should be pt instead of px
 - precedence of font-families should be supported in default font settings
Solution:
- Changed HTMLUtility#cleanupHtml(..) to ensure default font settings to be contained in CSS style definition
- changed default font size unit in AbstractSwtEnvironment#createDefaultFontSettings(Control) to pt
Plug-Ins changed:
- org.eclipse.scout.commons
- org.eclipse.scout.rt.ui.swt
- org.eclipse.scout.rt.ui.swing
Migration:
None