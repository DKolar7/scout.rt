/*******************************************************************************
 * Copyright (c) 2010 BSI Business Systems Integration AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     BSI Business Systems Integration AG - initial API and implementation
 ******************************************************************************/
package org.eclipse.scout.rt.client.mobile.ui.form.fields.table.autotable;

import java.util.List;

import org.eclipse.scout.commons.annotations.Order;
import org.eclipse.scout.commons.exception.ProcessingException;
import org.eclipse.scout.rt.client.mobile.ui.action.ActionButtonBarUtility;
import org.eclipse.scout.rt.client.mobile.ui.form.fields.table.IColumnWrapper;
import org.eclipse.scout.rt.client.ui.basic.table.ITable;
import org.eclipse.scout.rt.client.ui.basic.table.ITableRow;
import org.eclipse.scout.rt.client.ui.basic.table.TableAdapter;
import org.eclipse.scout.rt.client.ui.basic.table.TableEvent;
import org.eclipse.scout.rt.client.ui.basic.table.TableRowMapper;
import org.eclipse.scout.rt.client.ui.basic.table.columns.IColumn;
import org.eclipse.scout.rt.client.ui.form.AbstractForm;
import org.eclipse.scout.rt.client.ui.form.AbstractFormHandler;
import org.eclipse.scout.rt.client.ui.form.fields.IFormField;
import org.eclipse.scout.rt.client.ui.form.fields.IValueField;
import org.eclipse.scout.rt.client.ui.form.fields.groupbox.AbstractGroupBox;
import org.eclipse.scout.rt.shared.services.common.exceptionhandler.IExceptionHandlerService;
import org.eclipse.scout.service.SERVICES;

/**
 * @since 3.9.0
 */
public class AutoTableForm extends AbstractForm {
  private ITable m_table;
  private ITableRow m_row;
  private AutoTableBuilder m_autoTableBuilder;
  private List<IValueField> m_autoGeneratedFields;
  private P_TableListener m_tableListener;

  public AutoTableForm(ITableRow row) throws ProcessingException {
    super(false);
    m_row = row;
    m_table = row.getTable();
    m_autoTableBuilder = createAutoTableBuilder();
    m_autoGeneratedFields = m_autoTableBuilder.build(getTable().getColumns());
    callInitializer();

    m_tableListener = new P_TableListener();
    getTable().addTableListener(m_tableListener);
  }

  @Override
  protected void execDisposeForm() throws ProcessingException {
    getTable().removeTableListener(m_tableListener);
  }

  protected AutoTableBuilder createAutoTableBuilder() {
    return new AutoTableBuilder();
  }

  public ITable getTable() {
    return m_table;
  }

  public ITableRow getRow() {
    return m_row;
  }

  @Override
  protected int getConfiguredDisplayHint() {
    return DISPLAY_HINT_VIEW;
  }

  @Override
  protected String getConfiguredDisplayViewId() {
    return VIEW_ID_PAGE_DETAIL;
  }

  @Order(10.0f)
  public class MainBox extends AbstractGroupBox {

    @Override
    protected void injectFieldsInternal(List<IFormField> fieldList) {
      fieldList.addAll(ActionButtonBarUtility.convertyTableRowActionsToButtons(getTable()));
      super.injectFieldsInternal(fieldList);
    }

    @Order(10.0f)
    public class GroupBox extends AbstractGroupBox {

      @Override
      protected void injectFieldsInternal(List<IFormField> fieldList) {
        fieldList.addAll(m_autoGeneratedFields);
        super.injectFieldsInternal(fieldList);
      }

    }

  }

  public void start() throws ProcessingException {
    startInternal(new FormHandler());
  }

  @Order(10.0f)
  public class FormHandler extends AbstractFormHandler {
    private TableRowMapper m_mapper;

    @Override
    protected void execLoad() throws ProcessingException {
      //FIXME CGU find better solution which does not need casting
      m_mapper = new TableRowMapper(getRow());
      for (IValueField formField : m_autoGeneratedFields) {
        if (formField instanceof IColumnWrapper) {
          IColumnWrapper<IColumn> columnWrapper = (IColumnWrapper<IColumn>) formField;
          m_mapper.addMapping(columnWrapper.getWrappedObject(), formField);
        }
      }
      m_mapper.exportRowData();
    }

    @Override
    protected void execStore() throws ProcessingException {
      m_mapper.importRowData();
    }
  }

  private void handleRowDeleted() {
    try {
      doClose();
    }
    catch (ProcessingException e) {
      SERVICES.getService(IExceptionHandlerService.class).handleException(e);
    }
  }

  private class P_TableListener extends TableAdapter {

    @Override
    public void tableChanged(TableEvent e) {
      switch (e.getType()) {
        case TableEvent.TYPE_ALL_ROWS_DELETED:
          handleRowDeleted();
          break;
        case TableEvent.TYPE_ROWS_DELETED:
          ITableRow[] rows = e.getRows();
          if (rows != null) {
            for (ITableRow row : rows) {
              if (getRow().equals(row)) {
                handleRowDeleted();
                return;
              }
            }
          }
          break;
      }
    }

  }

}
